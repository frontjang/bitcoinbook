[[ch03_bitcoin_client]]
== Bitcoin Core: 레퍼런스 구현

((("open source licenses")))((("Nakamoto, Satoshi")))Bitcoin은 오픈 소스 프로젝트이며 오픈 소스 (MIT) 라이센스로 제공되며 어떤 용도로든 무료로 다운로드하여 사용할 수 있습니다. . 오픈 소스는 단순히 자유롭게 사용할 수있는 것 이상을 의미합니다. 또한 비트 코인 (bitcoin)은 자원 봉사자들의 열린 공동체에 의해 개발된다는 것을 의미합니다. 처음에는 나카 모토 사토시 만이 커뮤니티를 구성했습니다. 2016 년까지 비트 코인의 소스 코드에는 400 명이 넘는 기고가가 있었으며 약 12 ​​명 정도의 개발자가 코드에 대해 거의 전일제로, 수십 명의 개발자가 파트 타임으로 작업했습니다. 누구든지 코드를 포함하여 & # x2014;에 기여할 수 있습니다.

((("bitcoin whitepaper")))((("Satoshi client")))((("reference implementation", see="Bitcoin Core")))((("Bitcoin Core", "reference implementation")))나코모토 (Satoshi Nakamoto)가 비트 코인 (bitcoin)을 만들었을 때, 실제로 소프트웨어는 "satoshi_whitepaper"에서 재현 된 백서가 작성되기 전에 완성되었습니다. 사토시는 그것에 대해 글쓰기 전에 효과가 있는지 확인하기를 원했습니다. "Bitcoin"또는 "Satoshi client"로 알려진 첫 번째 구현은 크게 수정되고 개선되었습니다. 그것은 다른 호환 가능한 구현과 구별하기 위해 _Bitcoin Core_로 알려진 것으로 발전했습니다. 비트 코인 코어는 비트 코인 시스템의 _ 구현 구현입니다. 즉, 기술의 각 부분을 구현하는 방법에 대한 권위있는 참조입니다. Bitcoin Core는 지갑, 트랜잭션 및 블록 검증 엔진, 피어 투 피어 비트 코인 네트워크의 전체 네트워크 노드를 포함하여 비트 코인의 모든 측면을 구현합니다.

[경고]
====
((("wallets", "best practices for")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)")))((("bitcoin improvement proposals", "Hierarchical Deterministic Wallets (BIP-32/BIP-44)")))Bitcoin Core에는 지갑의 참조 구현이 포함되어 있지만 사용자 또는 응용 프로그램의 프로덕션 지갑으로 사용하기위한 것이 아닙니다. 응용 프로그램 개발자는 BIP-39 및 BIP-32 (<< mnemonic_code_words >> 및 << hd_wallets >> 참조)와 같은 현대 표준을 사용하여 지갑을 만드는 것이 좋습니다. BIP는 _Bitcoin Improvement Proposal_의 약자입니다.
====

<<bitcoin_core_architecture>>는 Bitcoin Core의 아키텍처를 보여줍니다 ((("Bitcoin Core", "architecture")))

[[bitcoin_core_architecture]]
.Bitcoin 핵심 아키텍처 (출처 : Eric Lombrozo)
image::images/mbc2_0301.png["Bitcoin Core Architecture"]


=== Bitcoin 개발 환경

((("development environment", "setup", see="Bitcoin Core")))(개발자는 비트 코인 작성을위한 모든 도구, 라이브러리 및 지원 소프트웨어를 사용하여 개발 환경을 설정해야 할 것입니다 (( "개발 환경", "설치", "Bitcoin Core"참조)) 응용 프로그램. 이 매우 기술적 인 장에서 우리는 그 과정을 단계별로 살펴볼 것입니다. 자료가 너무 빽빽 해지면 (그리고 실제로 개발 환경을 설정하지 않은 경우) 덜 기술적 인 다음 장으로 건너 뛸 수 있습니다.


[[compiling_core]]
=== 소스 코드에서 Bitcoin Core 컴파일하기

((("Bitcoin Core", "compiling from source code", id="BCsource03")))((("Bitcoin Core", "compiling from source code", "downloading")))((("code examples, obtaining and using")))Bitcoin Core의 소스 코드는 ZIP 아카이브로 다운로드하거나 GitHub에서 신뢰할 수있는 소스 저장소를 복제하여 다운로드 할 수 있습니다. ((( "GitHub bitcoin page"))) https://github.com/bitcoin/bitcoin[GitHub bitcoin 페이지의 사이드 바에서 Download ZIP을 선택하십시오. 또는 git 명령 줄을 사용하여 시스템에 소스 코드의 로컬 복사본을 만듭니다.

[TIP]
====
((("$ symbol")))((("shell commands")))((("terminal applications")))이 장의 많은 예제에서는 운영 체제의 명령 행 인터페이스 (예 : "셸"이라고도 함). "터미널"응용 프로그램을 통해 액세스 할 수 있습니다. 쉘은 프롬프트를 표시합니다. 명령을 입력하십시오. 쉘은 다음 명령에 대한 일부 텍스트와 새 프롬프트로 응답합니다. 프롬프트는 시스템에 따라 다르게 표시 될 수 있지만 다음 예제에서는 + + + 기호로 표시됩니다. 예제에서 + $ + 기호 다음에 텍스트가 표시되면 + $ + 기호를 입력하지 말고 바로 다음에 명령을 입력 한 다음 Enter 키를 눌러 명령을 실행하십시오. 예제에서 각 명령 아래의 행은 해당 명령에 대한 운영 체제의 응답입니다. 다음 + $ + 접두사가 보일 때 새로운 명령임을 알게 될 것이므로이 과정을 반복해야합니다.
====

((("cloning source code")))((("source code, cloning", seealso="Bitcoin Core")))이 예제에서 우리는 + git + 명령을 사용하여 로컬 복사본 ( "복제본")을 만드는 중입니다. 소스 코드 :

----
$ git clone https://github.com/bitcoin/bitcoin.git
Cloning into 'bitcoin'...
remote: Counting objects: 66193, done.
remote: Total 66193 (delta 0), reused 0 (delta 0), pack-reused 66193
Receiving objects: 100% (66193/66193), 63.39 MiB | 574.00 KiB/s, done.
Resolving deltas: 100% (48395/48395), done.
Checking connectivity... done.
$
----

[TIP]
====
((("distributed version control systems")))Git는 가장 널리 사용되는 분산 버전 관리 시스템으로 모든 소프트웨어 개발자 도구 키트의 필수 요소입니다. 운영 체제에 + git + 명령 또는 git 용 그래픽 사용자 인터페이스를 설치해야 할 수도 있습니다.
====

자식 복제 작업이 완료되면 _bitcoin_ 디렉토리에 소스 코드 저장소의 전체 로컬 사본이 생깁니다. 프롬프트에서 ++ ** cd bitcoin ** ++을 입력하여이 디렉토리로 변경하십시오.

----
$ cd bitcoin
----

==== Bitcoin Core Release 선택하기
((("Bitcoin Core", "compiling from source code", "version selection")))기본적으로 로컬 복사본은 비트 코인의 불안정 또는 베타 버전 일 수있는 최신 코드와 동기화됩니다. 코드를 컴파일하기 전에 릴리스 _ 태그를 체크 아웃하여 특정 버전을 선택하십시오. 그러면 로컬 사본이 키워드 태그로 식별 된 코드 저장소의 특정 스냅 샷과 동기화됩니다. 태그는 개발자가 버전 번호별로 코드의 특정 릴리스를 표시하는 데 사용됩니다. 먼저 사용 가능한 태그를 찾으려면 + git tag + 명령을 사용합니다.

----
$ git tag
v0.1.5
v0.1.6test1
v0.10.0
...
v0.11.2
v0.11.2rc1
v0.12.0rc1
v0.12.0rc2
...
----

태그 목록에는 출시 된 모든 버전의 Bitcoin이 표시됩니다. 관습에 따라 테스트를 위해 _release candidates_에는 접미사 "rc"가 있습니다. 프로덕션 시스템에서 실행할 수있는 안정적인 릴리스에는 접미사가 없습니다. 앞의 목록에서 v0.11.2 당시의 가장 높은 버전의 릴리스를 선택하십시오. 로컬 코드를이 버전과 동기화하려면 + git checkout + 명령을 사용하십시오.

----
$ git checkout v0.11.2
HEAD is now at 7e27892... Merge pull request #6975
----

+ git status + 명령을 실행하여 원하는 버전을 "체크 아웃"했는지 확인할 수 있습니다.

----
$ git status
HEAD detached at v0.11.2
nothing to commit, working directory clean
----

==== Bitcoin 핵심 빌드 구성

((("Bitcoin Core", "compiling from source code", "build configuration")))((("documentation")))((("build documentation", seealso="Bitcoin Core")))원본 (소스 코드에서 컴파일, "빌드 구성")))) 코드에는 여러 파일에서 찾을 수있는 문서가 포함되어 있습니다. _bitcoin_ 디렉토리에있는 _README.md_에있는 주 문서를 확인하려면 프롬프트에서 ++ ** more README.md ** ++를 입력하고 스페이스 바를 사용하여 다음 페이지로 진행하십시오. 이 장에서는 Linux에서 + bitcoind +라고도하는 명령 행 비트 클라이언트를 빌드합니다. ++ ** more doc / build-unix.md ** ++를 입력하여 플랫폼에서 + bitcoind + 명령 행 클라이언트를 컴파일하는 방법을 검토하십시오. macOS 및 Windows의 대체 지침은 각각 _build-osx.md_ 또는 _build-windows.md_와 같이 _doc_ 디렉토리에서 찾을 수 있습니다.

빌드 설명서의 첫 번째 부분에있는 빌드 필수 구성 요소를 신중하게 검토하십시오. Bitcoin을 컴파일하기 전에 시스템에 있어야하는 라이브러리입니다. 이러한 선행 조건이없는 경우 빌드 프로세스가 실패하고 오류가 발생합니다. 제반 사항을 놓쳤으므로 이런 일이 발생하면이를 설치 한 후 중단 한 부분부터 빌드 프로세스를 재개 할 수 있습니다. 필수 구성 요소가 설치되었다고 가정하면 _autogen.sh_ 스크립트를 사용하여 빌드 스크립트 세트를 생성하여 빌드 프로세스를 시작합니다.

[노트]
====
((("autogen/configure/make system", seealso="Bitcoin Core")))Bitcoin Core 빌드 프로세스가 버전 0.9부터 autogen / configure / make 시스템을 사용하도록 변경되었습니다. (( "autogen / configure / make system", seealso = "Bitcoin Core" 이전 버전은 간단한 Makefile을 사용하며 다음 예제와 약간 다르게 작동합니다. 컴파일하려는 버전의 지시 사항을 따르십시오. 0.9에 도입 된 autogen / configure / make는 이후의 모든 코드 버전에 사용되는 빌드 시스템이 될 가능성이 높으며 다음 예제에서 보여지는 시스템입니다.
====

----
$ ./autogen.sh
...
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
...
configure.ac:10: installing 'build-aux/compile'
configure.ac:5: installing 'build-aux/config.guess'
configure.ac:5: installing 'build-aux/config.sub'
configure.ac:9: installing 'build-aux/install-sh'
configure.ac:9: installing 'build-aux/missing'
Makefile.am: installing 'build-aux/depcomp'
...
----

_autogen.sh_ 스크립트는 시스템을 조사하여 올바른 설정을 발견하고 코드를 컴파일하는 데 필요한 모든 라이브러리가 있는지 확인하는 일련의 자동 구성 스크립트를 작성합니다. 가장 중요한 것은 빌드 프로세스를 커스터마이징하기위한 다양한 옵션을 제공하는 + configure + 스크립트입니다. 다양한 옵션을 보려면 ++ **. / configure --help ** ++를 입력하십시오.

----
$ ./configure --help
`configure' configures Bitcoin Core 0.11.2 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

...
Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]

  --enable-wallet         enable wallet (default is yes)

  --with-gui[=no|qt4|qt5|auto]
...
----

+ configure + 스크립트를 사용하면 + - enable-FEATURE + 및 + - disable-FEATURE + 플래그를 사용하여 + bitcoind +의 특정 기능을 활성화 또는 비활성화 할 수 있습니다. 여기서 [: span class = "keep-together" code> FEATURE </ code> </ span>]는 도움말 출력에 나열된대로 기능 이름으로 대체됩니다. 이 장에서는 모든 기본 기능으로 + bitcoind + 클라이언트를 빌드 할 것입니다. 우리는 구성 플래그를 사용하지 않을 것이지만 클라이언트의 선택적 기능이 무엇인지 이해하기 위해이를 검토해야합니다. 학업 환경에있는 경우 컴퓨터 실습 제한으로 홈 디렉토리에 응용 프로그램을 설치해야 할 수 있습니다 (예 : + - prefix = $ HOME +).

다음은 configure 스크립트의 기본 동작을 무시하는 유용한 옵션입니다.

++++
<dl>
<dt><code>--prefix=$HOME</code></dt>
<dd><p>This overrides the default installation location (which is <em>/usr/local/</em>) for the resulting executable. Use <code>$HOME</code> to put everything in your home directory, or a different path.</p></dd>

<dt><code>--disable-wallet</code></dt>
<dd><p>This is used to disable the reference wallet implementation.</p></dd>

<dt><code>--with-incompatible-bdb</code></dt>
<dd><p>If you are building a wallet, allow the use of an incompatible version of the Berkeley DB library.</p></dd>

<dt><code>--with-gui=no</code></dt>
<dd><p>Don't build the graphical user interface, which requires the Qt library. This builds server and command-line bitcoin only.</p></dd>
</dl>
++++

다음으로 + configure + 스크립트를 실행하여 필요한 모든 라이브러리를 자동으로 검색하고 시스템에 맞게 사용자 정의 된 빌드 스크립트를 만듭니다.

----
$ ./configure
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
...
[many pages of configuration tests follow]
...
$
----


모든 것이 잘 진행 되었다면, + configure + 명령은 + bitcoind +를 컴파일 할 수있게 해주는 커스터마이징 된 빌드 스크립트를 작성함으로써 끝날 것이다. 누락 된 라이브러리 또는 오류가있는 경우 + configure + 명령은 빌드 스크립트를 작성하는 대신 오류로 종료됩니다. 오류가 발생하면 라이브러리가 없거나 호환되지 않을 가능성이 높습니다. 빌드 문서를 다시 검토하고 누락 된 전제 조건을 설치했는지 확인하십시오. 그런 다음 + configure +를 다시 실행하여 오류가 수정되었는지 확인하십시오.

==== Bitcoin 핵심 실행 파일 빌드

((("Bitcoin Core", "compiling from source code", "core executables")))((("core executables", seealso="Bitcoin Core")))다음으로, 소스 코드를 컴파일하고, 프로세스를 컴파일합니다. (( "Bitcoin Core", "소스 코드에서 컴파일", "핵심 실행 파일" CPU 및 사용 가능한 메모리의 속도에 따라 완료하는 데 최대 1 시간이 소요될 수 있습니다. 컴파일 과정에서 몇 초 또는 몇 분 간격으로 출력을보아야하며, 문제가 발생하면 오류가 발생합니다. 오류가 발생하거나 컴파일 프로세스가 중단되면 + make +를 다시 입력하여 언제든지 다시 시작할 수 있습니다. +++ **를 입력하여 실행 가능한 응용 프로그램 컴파일을 시작합니다.

----
$ make
Making all in src
  CXX      crypto/libbitcoinconsensus_la-hmac_sha512.lo
  CXX      crypto/libbitcoinconsensus_la-ripemd160.lo
  CXX      crypto/libbitcoinconsensus_la-sha1.lo
  CXX      crypto/libbitcoinconsensus_la-sha256.lo
  CXX      crypto/libbitcoinconsensus_la-sha512.lo
  CXX      libbitcoinconsensus_la-hash.lo
  CXX      primitives/libbitcoinconsensus_la-transaction.lo
  CXX      libbitcoinconsensus_la-pubkey.lo
  CXX      script/libbitcoinconsensus_la-bitcoinconsensus.lo
  CXX      script/libbitcoinconsensus_la-interpreter.lo

[... 더 많은 편집 메시지가 뒤 따른다 ...]

$
----

모두 잘되면 Bitcoin Core가 컴파일됩니다. 마지막 단계는 + sudo make install + 명령을 사용하여 시스템에 다양한 실행 파일을 설치하는 것입니다. 이 단계는 관리자 권한이 필요하기 때문에 사용자 암호를 묻는 메시지가 나타날 수 있습니다.

----
$ sudo make install
Password:
Making install in src
 ../build-aux/install-sh -c -d '/usr/local/lib'
libtool: install: /usr/bin/install -c bitcoind /usr/local/bin/bitcoind
libtool: install: /usr/bin/install -c bitcoin-cli /usr/local/bin/bitcoin-cli
libtool: install: /usr/bin/install -c bitcoin-tx /usr/local/bin/bitcoin-tx
...
$
----

((("", startref="BCsource03")))+ bitcoind +를 기본 설치하면 _ / usr / local / bin_에 저장됩니다. Bitcoin Core가 제대로 설치되었는지 확인하려면 다음과 같이 시스템에 실행 파일의 경로를 묻습니다.

----
$ which bitcoind
/usr/local/bin/bitcoind

$ which bitcoin-cli
/usr/local/bin/bitcoin-cli
----

=== Bitcoin 코어 노드 실행하기

((("Bitcoin Core", "running core nodes", id="BCnode03")))((("bitcoin nodes", "running core nodes", id="BNcore03")))Bitcoin의 피어 - 투 - 피어 (( "Bitcoin 코어", "실행중인 코어 노드", id = "BCnode03" 네트워크는 네트워크 "노드"로 구성되어 있으며 주로 자원 봉사자와 비트 코인 응용 프로그램을 만드는 일부 비즈니스에서 실행됩니다. 비트 코인 노드를 실행하는 노드는 비트 코인 블록 체인에 대한 직접적이고 권위있는 뷰를 가지며 모든 트랜잭션을 로컬 복사본으로 자체 시스템에서 독립적으로 검증합니다. 노드를 실행하면 트랜잭션을 검증하기 위해 제 3 자에 의존 할 필요가 없습니다. 또한 비트 코인 노드를 실행하면 비트 코인 네트워크를보다 강력하게 만들어 비트 코인 네트워크에 기여할 수 있습니다.

그러나 노드를 실행하려면 모든 비트 코인 트랜잭션을 처리 할 수있는 충분한 리소스가있는 영구적으로 연결된 시스템이 필요합니다. 모든 트랜잭션을 인덱싱할지 여부와 블록 체인의 전체 복사본을 유지할지 여부에 따라 많은 디스크 공간과 RAM이 필요할 수도 있습니다. 2016 년 말 현재 풀 인덱스 노드는 2GB의 RAM과 125GB의 디스크 공간을 필요로하므로 확장 여지가 있습니다. 또한 Bitcoin 노드는 Bitcoin 트랜잭션 및 블록을 전송 및 수신하여 인터넷 대역폭을 소비합니다. 인터넷 연결이 제한되어 있거나 데이터 용량이 낮거나 계량 된 경우 (기가비트로 청구) 비트 코인 노드를 실행하거나 대역폭을 제한하는 방식으로 실행하면 안됩니다 (<< constrained_resources> 참조). >).

[팁]
====
((("warnings and cautions", "core node resource requirements")))((("resource requirements")))Bitcoin Core는 BitCin에서 발생한 모든 트랜잭션과 함께 기본적으로 블록 체인의 전체 복사본을 유지합니다 (( "경고 및주의", "핵심 노드 리소스 요구 사항" 이 데이터 세트는 수십 기가 바이트 크기이며 CPU 및 인터넷 연결 속도에 따라 며칠 또는 몇 주에 걸쳐 점진적으로 다운로드됩니다. Bitcoin Core는 전체 블록 체인 데이터 집합이 다운로드 될 때까지 트랜잭션을 처리하거나 계정 잔액을 업데이트 할 수 없습니다. 초기 동기화를 완료하는 데 필요한 디스크 공간, 대역폭 및 시간이 충분한 지 확인하십시오. 이전 블록 (<constrained_resources >> 참조)을 삭제하여 블록 체인의 크기를 줄 이도록 Bitcoin Core를 구성 할 수 있지만 데이터를 폐기하기 전에 전체 데이터 세트를 다운로드합니다.
====

이러한 리소스 요구 사항에도 불구하고 수천 명의 지원자가 비트 코닝 노드를 실행합니다. 일부는 라즈베리 파이 (카드 한 덩어리 크기의 35 달러짜리 컴퓨터)와 같은 간단한 시스템에서 작동합니다. 많은 자원 봉사자들은 일반적으로 Linux의 일부 변형 된 임대 서버에서 비트 코닉 노드를 실행합니다. _Virtual Private Server_ (VPS) 또는 _Cloud Computing Server_ 인스턴스를 사용하여 비트 코인 노드를 실행할 수 있습니다. 이러한 서버는 다양한 제공 업체에서 월 25-50 달러에 대여 할 수 있습니다.

왜 노드를 실행하고 싶습니까? 다음은 가장 일반적인 이유 중 일부입니다.

* 비트 코인 소프트웨어를 개발 중이고 네트워크 및 블록 체인에 대한 프로그래밍 (API) 액세스를 위해 비트 코인 노드를 사용해야하는 경우.

* Bitcoin의 합의 규칙에 따라 트랜잭션의 유효성을 검사해야하는 응용 프로그램을 작성하는 경우. 일반적으로 비트 코인 소프트웨어 회사는 여러 노드를 운영합니다.

* 비트 코인을 지원하려는 경우. 노드를 실행하면 네트워크가 더 강력 해지고 더 많은 지갑, 더 많은 사용자 및 더 많은 트랜잭션을 처리 할 수 ​​있습니다.

* 거래를 처리하거나 유효성을 확인하기 위해 제 3 자에게 의존하기를 원하지 않는 경우.

이 책을 읽고 Bitcoin 소프트웨어 개발에 관심이 있다면 자신 만의 노드를 실행해야합니다.

==== Bitcoin Core 처음 실행하기

((("security", see="also warnings and cautions")))((("passwords", "core node first run")))((("Bitcoin Core", "running core nodes", "first run"))) + bitcoind +를 처음 실행하면 JSON-RPC 인터페이스에 강력한 암호를 사용하여 구성 파일을 작성하라는 메시지가 표시됩니다. 이 암호는 Bitcoin Core에서 제공하는 API (Application Programming Interface)에 대한 액세스를 제어합니다.

+++ bitcoind ** ++를 터미널에 입력하여 + bitcoind +를 실행하십시오.

----
$ bitcoind
Error: To use the "-server" option, you must set a rpcpassword in the configuration file:
/home/ubuntu/.bitcoin/bitcoin.conf
It is recommended you use the following random password:
rpcuser=bitcoinrpc
rpcpassword=2XA4DuKNCbtZXsBQRRNDEwEY2nM6M4H9Tx5dFjoAVVbK
(you do not need to remember this password)
The username and password MUST NOT be the same.
If the file does not exist, create it with owner-readable-only file permissions.
It is also recommended to set alertnotify so you are notified of problems;
for example: alertnotify=echo %s | mail -s "Bitcoin Alert" admin@foo.com
----

보시다시피 처음 + bitcoind +를 실행하면 구성 파일을 작성해야하며 + rpcuser + 및 + rpcpassword + 항목이 있어야합니다. 또한 경고 메커니즘을 설정하는 것이 좋습니다. 다음 절에서는 다양한 구성 옵션을 검토하고 구성 파일을 설정합니다.

==== Bitcoin 코어 노드 구성

((("Bitcoin Core", "running core nodes", "configuring")))((("warnings and cautions", "password creation")))((("passwords", "creating")))((("security", "passwords")))원하는 편집기에서 구성 파일을 편집하고 매개 변수를 설정하고 + bitcoind +가 권장하는 강력한 암호로 암호를 바꾸십시오. 책에 표시된 비밀번호를 사용하지 마십시오. _.bitcoin_ 디렉토리 안에 (사용자의 홈 디렉토리 아래에) _.bitcoin / bitcoin.conf_라는 이름으로 파일을 생성하고 사용자 이름과 암호를 제공하십시오 :

[source,ini]
----
rpcuser=bitcoinrpc
rpcpassword=CHANGE_THIS
----

+ rpcuser + 및 + rpcpassword + 옵션 외에도 Bitcoin Core는 네트워크 노드의 동작, 블록 체인의 저장 및 기타 여러 측면을 수정하는 100 가지 이상의 구성 옵션을 제공합니다. 이 옵션 목록을 보려면 + bitcoind --help +를 실행하십시오 :

----
 bitcoind --help
Bitcoin Core Daemon version v0.11.2

Usage:
  bitcoind [options]                     Start Bitcoin Core Daemon

Options:

  -?
       This help message

  -alerts
       Receive and display P2P network alerts (default: 1)

  -alertnotify=<cmd>
       Execute command when a relevant alert is received or we see a really
       long fork (%s in cmd is replaced by message)
...
[many more options]
...

  -rpcsslciphers=<ciphers>
       Acceptable ciphers (default:
       TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH)
----

((("configuration options", seealso="Bitcoin Core"))) 다음은 설정 파일에서 설정하거나 + bitcoind +에 대한 명령 행 매개 변수로 설정할 수있는 가장 중요한 옵션들입니다 :

alertnotify :: 지정된 명령 또는 스크립트를 실행하여이 노드의 소유자에게 전자 메일로 긴급 경고를 보냅니다.

conf :: 구성 파일의 대체 위치. 이것은 + bitcoind +에 대한 명령 행 매개 변수로서 만 의미가 있습니다. 이것은 그것이 가리키는 설정 파일 안에있을 수 없기 때문입니다.

datadir :: 모든 블록 체인 데이터를 넣을 디렉토리와 파일 시스템을 선택하십시오. 기본적으로 이것은 홈 디렉토리의 _bitcoin_ 서브 디렉토리입니다. 이 파일 시스템에 몇 기가 바이트의 여유 공간이 있는지 확인하십시오.

prune :: 오래된 블록을 삭제하여 디스크 공간 요구 사항을이 많은 메가 바이트로 줄입니다. 전체 블록 체인에 맞지 않는 리소스가 제한된 노드에서이 옵션을 사용하십시오.

txindex :: 모든 트랜잭션의 인덱스를 유지 보수합니다. 즉, 모든 트랜잭션을 ID로 프로그래밍 방식으로 검색 할 수있는 블록 체인의 완전한 복사본을 의미합니다.

maxconnections :: 연결을 허용 할 최대 노드 수를 설정합니다. 이 값을 기본값에서 줄이면 대역폭 소비가 줄어 듭니다. 데이터 용량이 있거나 기가 바이트 단위로 지불하는 경우 사용하십시오.

maxmempool :: 트랜잭션 메모리 풀을이 많은 메가 바이트로 제한하십시오. 이를 사용하여 노드의 메모리 사용을 줄입니다.

maxreceivebuffer / maxsendbuffer :: 연결 당 메모리 버퍼를 1000 바이트의 여러 배로 제한하십시오. 메모리가 제한된 노드에서 사용하십시오.

minrelaytxfee :: 귀하가 중계 할 최소 수수료 거래를 설정하십시오. 이 값 미만에서는 거래가 0 수수료로 취급됩니다. 메모리가 제한된 노드에서이를 사용하여 메모리 내 트랜잭션 풀의 크기를 줄입니다.


[[txindex]]
.트랜잭션 데이터베이스 색인 및 txindex 옵션
****
((("Bitcoin Core", "running core nodes", "database options")))((("transactions", "database configuration options")))((("txindex option")))((("full indexing option")))기본적으로 Bitcoin Core는 사용자의 지갑과 관련된 트랜잭션 만 _ 포함하는 데이터베이스를 작성합니다. + getrawtransaction + (<< exploring_and_decoding_transanctions >> 참조)와 같은 명령을 사용하여 _any_ transaction에 액세스하려면 Bitcoin Core가 + txindex + 옵션을 사용하여 완료 할 수있는 완전한 트랜잭션 색인을 구성해야합니다. Bitcoin Core 구성 파일에서 + txindex = 1 +을 설정하십시오. 이 옵션을 처음 설정하고 나중에 전체 색인으로 설정 한 경우 + -reindex + 옵션을 사용하여 + bitcoind +를 다시 시작하고 인덱스를 다시 작성할 때까지 기다려야합니다.
****

<< full_index_node >>는 이전 옵션을 비트 코인 애플리케이션의 API 백엔드로 실행되는 완전히 색인 된 노드와 결합하는 방법을 보여줍니다.

[[full_index_node]]
.전체 인덱스 노드의 샘플 구성
====
----
alertnotify=myemailscript.sh "Alert: %s"
datadir=/lotsofspace/bitcoin
txindex=1
rpcuser=bitcoinrpc
rpcpassword=CHANGE_THIS
----
====

<<constrained_resources>>는 작은 서버에서 실행되는 리소스가 제한된 노드를 보여줍니다.

[[constrained_resources]]
.리소스가 제한된 시스템의 샘플 구성
====
----
alertnotify=myemailscript.sh "Alert: %s"
maxconnections=15
prune=5000
minrelaytxfee=0.0001
maxmempool=200
maxreceivebuffer=2500
maxsendbuffer=500
rpcuser=bitcoinrpc
rpcpassword=CHANGE_THIS
----
====

구성 파일을 편집하고 필요에 가장 적합한 옵션을 설정하면이 구성으로 + bitcoind +를 테스트 할 수 있습니다. + printtoconsole + 옵션을 사용하여 Bitcoin Core를 실행하여 콘솔 출력으로 포 그라운드에서 실행하십시오.

----
$ bitcoind -printtoconsole

Bitcoin version v0.11.20.0
Using OpenSSL version OpenSSL 1.0.2e 3 Dec 2015
Startup time: 2015-01-02 19:56:17
Using data directory /tmp/bitcoin
Using config file /tmp/bitcoin/bitcoin.conf
Using at most 125 connections (275 file descriptors available)
Using 2 threads for script verification
scheduler thread start
HTTP: creating work queue of depth 16
No rpcpassword set - using random cookie authentication
Generated RPC authentication cookie /tmp/bitcoin/.cookie
HTTP: starting 4 worker threads
Bound to [::]:8333
Bound to 0.0.0.0:8333
Cache configuration:
* Using 2.0MiB for block index database
* Using 32.5MiB for chain state database
* Using 65.5MiB for in-memory UTXO set
init message: Loading block index...
Opening LevelDB in /tmp/bitcoin/blocks/index
Opened LevelDB successfully

[... more startup messages ...]
----

올바른 설정을로드하고 예상 한대로 작동하는 것으로 확인되면 Ctrl-C를 눌러 프로세스를 중단 할 수 있습니다.

백그라운드로 Bitcoin Core를 프로세스로 실행하려면 + bitcoind -daemon +와 같이 + daemon + 옵션으로 시작하십시오.

비트 동전 노드의 진행 상태 및 런타임 상태를 모니터링하려면 다음 명령을 사용하십시오. bitcoin-cli getinfo + :

----
$ bitcoin-cli getinfo
----

[source,json]
----
{
    "version" : 110200,
    "protocolversion" : 70002,
    "blocks" : 396328,
    "timeoffset" : 0,
    "connections" : 15,
    "proxy" : "",
    "difficulty" : 120033340651.23696899,
    "testnet" : false,
    "relayfee" : 0.00010000,
    "errors" : ""
}
----

블록 체인 높이가 396328 블록이고 활성 네트워크 연결이 15 개인 Bitcoin Core 버전 0.11.2를 실행하는 노드를 보여줍니다.

선택한 구성 옵션이 만족 스러우면 운영 체제의 시작 스크립트에 Bitcoin을 추가하여 운영 체제가 다시 시작될 때 Bitcoin을 계속 실행하고 다시 시작해야합니다. bitcoin의 소스 디렉토리에서 _contrib / init_ 아래의 다양한 운영 체제 용 시작 스크립트 예제를 찾을 수 있고 _README.md_ 파일은 어떤 시스템에서 어떤 스크립트를 사용하는지 보여줍니다. (( "" ","startref = "BCnode03")) ( "", startref = "BNcore03")))

=== Bitcoin 핵심 응용 프로그램 프로그래밍 인터페이스 (API)

((("Bitcoin Core", "Bitcoin Core API", id="BCapi03")))Bitcoin Core 클라이언트는 명령 행 헬퍼 + bitcoin-cli +를 사용하여 액세스 할 수있는 JSON-RPC 인터페이스를 구현합니다. 커맨드 라인을 사용하면 API를 통해 프로그래밍 방식으로 사용할 수있는 기능을 대화 형으로 실험 할 수 있습니다. (( "Bitcoin Core", "Bitcoin Core API", "RPC commands"))) 시작하려면 + help + 명령을 호출하여 사용 가능한 bitcoin RPC 명령 목록을보십시오.

[[bitcoind_commands]]

----
$ bitcoin-cli help
addmultisigaddress nrequired ["key",...] ( "account" )
addnode "node" "add|remove|onetry"
backupwallet "destination"
createmultisig nrequired ["key",...]
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...}
decoderawtransaction "hexstring"
...
...
verifymessage "bitcoinaddress" "signature" "message"
walletlock
walletpassphrase "passphrase" timeout
walletpassphrasechange "oldpassphrase" "newpassphrase"
----

이 명령들 각각은 많은 매개 변수를 취할 수 있습니다. 추가 도움말, 자세한 설명 및 매개 변수에 대한 정보를 얻으려면 + help + 다음에 명령 이름을 추가하십시오. 예를 들어, + getblockhash + RPC 명령에 대한 도움말을 보려면 다음을 수행하십시오.

----
$ bitcoin-cli help getblockhash
getblockhash index

Returns hash of block in best-block-chain at index provided.

Arguments:
1. index         (numeric, required) The block index

Result:
"hash"         (string) The block hash

Examples:
> bitcoin-cli getblockhash 1000
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhash", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----

도움말 정보 끝에 + bitcoin-cli + 헬퍼 또는 HTTP 클라이언트 + curl +를 사용하는 RPC 명령의 두 가지 예가 표시됩니다. 이 예제는 사용자가 명령을 호출하는 방법을 보여줍니다. 첫 번째 예제를 복사하고 결과를 봅니다.

----
$ bitcoin-cli getblockhash 1000
00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09
----

결과는 블록 해시이며 다음 장에서 자세히 설명합니다. 그러나 현재이 명령은 Bitcoin Core 노드가 실행 중이며 명령을 수락하고 블록 1000에 대한 정보가 반환된다는 것을 보여 주면서 시스템에서 동일한 결과를 반환해야합니다.

다음 섹션에서는 매우 유용한 RPC 명령과 예상되는 출력을 보여줍니다.

==== Bitcoin 핵심 클라이언트 상태에 대한 정보 얻기

((("Bitcoin Core", "Bitcoin Core API", "status information")))Command: +getinfo+

Bitcoin의 + getinfo + RPC 명령은 비트 코인 네트워크 노드, 지갑 및 블록 체인 데이터베이스의 상태에 대한 기본 정보를 표시합니다. + bitcoin-cli +를 사용하여 실행하십시오.

----
$ bitcoin-cli getinfo
----
[source,json]
----
{
    "version" : 110200,
    "protocolversion" : 70002,
    "blocks" : 396367,
    "timeoffset" : 0,
    "connections" : 15,
    "proxy" : "",
    "difficulty" : 120033340651.23696899,
    "testnet" : false,
    "relayfee" : 0.00010000,
    "errors" : ""
}

----

데이터는 모든 프로그래밍 언어에서 쉽게 "소비"할 수 있지만 사람이 읽을 수있는 형식 인 JSON (JavaScript Object Notation) 형식으로 반환됩니다. 이 데이터 중에 비트 코인 소프트웨어 클라이언트 (110200) 및 비트 코인 프로토콜 (70002)의 버전 번호가 나와 있습니다. 현재 블록 높이를보고 얼마나 많은 블록이이 클라이언트에 알려 졌는지 보여줍니다 (396367). 또한 비트 코인 네트워크 및이 클라이언트와 관련된 설정에 대한 다양한 통계를 볼 수 있습니다.

[팁]
====
+ bitcoind + 클라이언트가 다른 bitcoin 클라이언트의 블록을 다운로드 할 때 현재 블록 체인 높이를 "따라 잡을"수있는 시간이 하루 이상 걸릴 것입니다. + getinfo +를 사용하여 진행 상황을 확인하여 알려진 블록 수를 확인할 수 있습니다.
====

[[exploring_and_decoding_transanctions]]
==== Exploring and Decoding Transactions

((("Bitcoin Core", "Bitcoin Core API", "exploring and decoding transactions")))((("transactions", "exploring with Bitcoin Core API")))Commands: +getrawtransaction+, +decoderawtransaction+



In <<cup_of_coffee>>, ((("use cases", "buying coffee", id="alicethree")))A앨리스는 Bob 's Cafe에서 커피 한 잔을 샀습니다. 거래가 트랜잭션 ID (txid) + 0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2 + 인 블록 체인에 기록되었습니다. API를 사용하여 트랜잭션 ID를 매개 변수로 전달하여 해당 트랜잭션을 검색하고 조사해 봅시다.

++++
<pre data-type="programlisting">
$ bitcoin-cli getrawtransaction 0627052b6f28912f2703066a912ea577f2ce4da4caa5a&#x21b5;
5fbd8a57286c345c2f2

0100000001186f9f998a5aa6f048e51dd8419a14d8a0f1a8a2836dd734d2804fe65fa35779000&#x21b5;
000008b483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4&#x21b5;
ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813014&#x21b5;
10484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc54123363767&#x21b5;
89d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adfffffffff0260e3160000000&#x21b5;
0001976a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788acd0ef8000000000001976a9&#x21b5;
147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac00000000
</pre>
++++


[TIP]
====
((("transaction IDs (txd)")))((("malleability")))트랜잭션 ID는 트랜잭션이 확인 될 때까지는 신뢰할 수 없습니다. 블록 체인에서 트랜잭션 해시가 없다고해서 트랜잭션이 처리되지 않았다는 의미는 아닙니다. 트랜잭션 해시는 블록에서 확인하기 전에 수정할 수 있기 때문에이를 "트랜잭션 가단성"이라고합니다. 확인 후 txid는 변경 불가능하고 신뢰할 수 있습니다.
====

+ getrawtransaction + 명령은 직렬화 된 트랜잭션을 16 진법으로 반환합니다. 이를 해독하기 위해 + decoderawtransaction + 명령을 사용하여 16 진수 데이터를 매개 변수로 전달합니다. + getrawtransaction +가 반환 한 16 진수를 복사하여 + decoderawtransaction +에 매개 변수로 붙여 넣을 수 있습니다.

++++
<pre data-type="programlisting">
$ bitcoin-cli decoderawtransaction 0100000001186f9f998a5aa6f048e51dd8419a14d8&#x21b5;
a0f1a8a2836dd734d2804fe65fa35779000000008b483045022100884d142d86652a3f47ba474&#x21b5;
6ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298&#x21b5;
cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fd&#x21b5;
e0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa&#x21b5;
336a8d752adfffffffff0260e31600000000001976a914ab68025513c3dbd2f7b92a94e0581f5&#x21b5;
d50f654e788acd0ef8000000000001976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8&#x21b5;
88ac00000000

</pre>
++++

++++
<pre data-type="programlisting" data-code-language="json">
{
  "txid": "0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2",
  "size": 258,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "7957a35fe64f80d234d76d83a2...8149a41d81de548f0a65a8a999f6f18",
      "vout": 0,
      "scriptSig": {
        "asm":"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1decc...",
        "hex":"483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1de..."
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.01500000,
      "n": 0,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 ab68...5f654e7 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"
        ]
      }
    },
    {
      "value": 0.08450000,
      "n": 1,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 7f9b1a...025a8 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK"
        ]
      }
    }
  ]
}

</pre>
++++

트랜잭션 디코드는 트랜잭션 입력 및 출력을 포함하여이 트랜잭션의 모든 구성 요소를 보여줍니다. 이 경우 50 밀리 비트로 새 주소를 계산 한 트랜잭션이 하나의 입력을 사용하고 두 개의 출력을 생성 한 것을 볼 수 있습니다. 이 트랜잭션에 대한 입력은 이전에 확인 된 트랜잭션 (+ 7957a35fe +로 시작하는 vin txid로 표시)의 출력입니다. 두 개의 출력은 50 밀리 비트 신용에 해당하며 출력은 보낸 사람에게 다시 변경됩니다.

동일한 거래 (예 : + getrawtransaction +)를 사용하여이 거래에서 txid가 참조하는 이전 거래를 검토하여 블록 체인을 더 탐색 할 수 있습니다. 트랜잭션에서 트랜잭션으로 점프하여 동전이 소유자 주소에서 소유자 주소로 전송되면서 일련의 트랜잭션을 수행 할 수 있습니다.



==== 블록 탐색

((("Bitcoin Core", "Bitcoin Core API", "exploring blocks")))((("blocks", "exploring with Bitcoin Core API")))Commands: +getblock+, +getblockhash+

((("blocks", "block height")))((("blocks", "block hash")))블록 탐색은 트랜잭션 탐색과 유사합니다. 그러나 블록은 _height_ 블록 또는 _hash_ 블록에 의해 참조 될 수 있습니다. 먼저 높이를 기준으로 블록을 찾으십시오. << cup_of_coffee >>에서는 Alice의 거래가 블록 277316에 포함되어있는 것을 보았습니다.

+ getblockhash + 명령을 사용하면 블록 높이를 매개 변수로 사용하고 해당 블록의 블록 해시를 반환합니다.

++++
<pre data-type="programlisting">
$ bitcoin-cli getblockhash 277316
0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b31b2cc7bdc4
</pre>
++++

Alice의 트랜잭션이 어느 블록에 포함되었는지 알았으므로 이제 해당 블록을 쿼리 할 수 ​​있습니다. 블록 해시를 매개 변수로 사용하여 + getblock + 명령을 사용합니다.

++++
<pre data-type="programlisting">
$ bitcoin-cli getblock 0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b3&#x21b5;
1b2cc7bdc4
</pre>
++++

++++
<pre data-type="programlisting" data-code-language="json">
{
  "hash": "0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b31b2cc7bdc4",
  "confirmations": 37371,
  "size": 218629,
  "height": 277316,
  "version": 2,
  "merkleroot": "c91c008c26e50763e9f548bb8b2fc323735f73577effbc55502c51eb4cc7cf2e",
  "tx": [
    "d5ada064c6417ca25c4308bd158c34b77e1c0eca2a73cda16c737e7424afba2f",
    "b268b45c59b39d759614757718b9918caf0ba9d97c56f3b91956ff877c503fbe",
    "04905ff987ddd4cfe603b03cfb7ca50ee81d89d1f8f5f265c38f763eea4a21fd",
    "32467aab5d04f51940075055c2f20bbd1195727c961431bf0aff8443f9710f81",
    "561c5216944e21fa29dd12aaa1a45e3397f9c0d888359cb05e1f79fe73da37bd",
[... hundreds of transactions ...]
    "78b300b2a1d2d9449b58db7bc71c3884d6e0579617e0da4991b9734cef7ab23a",
    "6c87130ec283ab4c2c493b190c20de4b28ff3caf72d16ffa1ce3e96f2069aca9",
    "6f423dbc3636ef193fd8898dfdf7621dcade1bbe509e963ffbff91f696d81a62",
    "802ba8b2adabc5796a9471f25b02ae6aeee2439c679a5c33c4bbcee97e081196",
    "eaaf6a048588d9ad4d1c092539bd571dd8af30635c152a3b0e8b611e67d1a1af",
    "e67abc6bd5e2cac169821afc51b207127f42b92a841e976f9b752157879ba8bd",
    "d38985a6a1bfd35037cb7776b2dc86797abbb7a06630f5d03df2785d50d5a2ac",
    "45ea0a3f6016d2bb90ab92c34a7aac9767671a8a84b9bcce6c019e60197c134b",
    "c098445d748ced5f178ef2ff96f2758cbec9eb32cb0fc65db313bcac1d3bc98f"
  ],
  "time": 1388185914,
  "mediantime": 1388183675,
  "nonce": 924591752,
  "bits": "1903a30c",
  "difficulty": 1180923195.258026,
  "chainwork": "000000000000000000000000000000000000000000000934695e92aaf53afa1a",
  "previousblockhash": "0000000000000002a7bbd25a417c0374cc55261021e8a9ca74442b01284f0569",
  "nextblockhash": "000000000000000010236c269dd6ed714dd5db39d36b33959079d78dfd431ba7"
}
</pre>
++++

블록에는 419 건의 거래가 포함되어 있으며 나열된 64 번째 거래 (+ 0627052b ... +)는 Alice의 커피 지불입니다. + height + 항목은 이것이 블록 체인의 277316 번째 블록임을 나타냅니다.

==== Bitcoin Core의 프로그래밍 인터페이스 사용

((("Bitcoin Core", "Bitcoin Core API", "using programmatic interface")))((("programmatic interface", id="progint03")))+ bitcoin-cli + 도우미는 (( "Bitcoin Core", "Bitcoin Core API", "프로그래밍 인터페이스 사용")))) (( "프로그래밍 인터페이스", id = "progint03"))) Bitcoin Core API 및 테스트 기능 그러나 애플리케이션 프로그래밍 인터페이스의 전체적인 요점은 함수를 프로그래밍 방식으로 액세스하는 것입니다. 이 섹션에서는 다른 프로그램에서 Bitcoin Core에 액세스하는 방법을 보여줍니다.

Bitcoin Core API는 JSON-RPC 인터페이스입니다. JSON은 JavaScript Object Notation의 약자로, 사람과 프로그램이 쉽게 읽을 수있는 데이터를 표현하는 매우 편리한 방법입니다. RPC는 원격 프로 시저 호출을 의미합니다. 즉, 우리는 네트워크 프로토콜을 통해 원격 (Bitcoin Core 노드에서) 절차 (함수)를 호출하고 있음을 의미합니다. 이 경우 네트워크 프로토콜은 HTTP 또는 HTTPS (암호화 된 연결의 경우)입니다.

+ bitcoin-cli + 명령을 사용하여 명령에 대한 도움말을 얻었을 때 다재다능한 명령 줄 HTTP 클라이언트를 사용하여 다음과 같은 JSON-RPC 호출 중 하나를 구성하는 + curl + 예제를 보여줍니다.

----
$ curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getinfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----

이 명령은 + curl +가 로컬 호스트 (127.0.0.1)에 HTTP 요청을 제출하고 기본 비트 코인 포트 (8332)에 연결하며 + text / plain + 인코딩을 사용하여 + getinfo + 메소드에 대해 + jsonrpc + 요청을 제출 함을 보여줍니다.

자신의 프로그램에서 JSON-RPC 호출을 구현하는 경우, 앞의 + curl + 예제와 비슷한 일반 HTTP 라이브러리를 사용하여 호출을 구성 할 수 있습니다.

그러나 Bitcoin Core API를 훨씬 더 단순하게 "랩핑 (wrap)"하는 대부분의 모든 프로그래밍 언어에 라이브러리가 있습니다. 우리는 + python-bitcoinlib + 라이브러리를 사용하여 API 액세스를 단순화합니다. 이것은 JSON-RPC 호출을 수행하는 Bitcoin Core 인스턴스를 실행해야한다는 것을 기억하십시오.

<< rpc_example >>의 파이썬 스크립트는 간단한 + getinfo + 호출을 만들고 Bitcoin Core에서 반환 한 데이터에서 + block + 매개 변수를 인쇄합니다.

[[rpc_example]]
.Running getinfo via Bitcoin Core's JSON-RPC API
====
[source,python]
----
include::code/rpc_example.py[]
----
====

Running it gives us the following result:

----
$ python rpc_example.py
394075
----

우리 지역의 Bitcoin Core 노드는 블록 체인에 394075 블록을 가지고 있다고 알려줍니다. 탁월한 결과는 아니지만 Bitcoin Core의 JSON-RPC API에 대한 단순화 된 인터페이스로서 라이브러리의 기본 사용을 보여줍니다.

다음으로 + getrawtransaction + 및 + decodetransaction + 호출을 사용하여 Alice의 커피 지불 세부 정보를 검색해 봅시다. << rpc_transaction >>에서는 Alice의 트랜잭션을 검색하고 트랜잭션의 출력을 나열합니다. 각 출력에 대해 수신자 주소와 값을 표시합니다. 다시 말하면 Alice의 거래에는 Bob 's Cafe에게 지불하는 하나의 출력과 Alice에 대한 변경을위한 하나의 결과가있었습니다.

[[rpc_transaction]]
.Retrieving a transaction and iterating its outputs
====
[source,python]
----
include::code/rpc_transaction.py[]
----
====

Running this code, we get:

----
$ python rpc_transaction.py
([u'1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA'], Decimal('0.01500000'))
([u'1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK'], Decimal('0.08450000'))
----

위의 두 예제 모두 다소 단순합니다. 프로그램을 실행하는 데 실제로 프로그램이 필요하지 않습니다. + bitcoin-cli + 도우미를 쉽게 사용할 수 있습니다. 그러나 다음 예제에서는 수백 개의 RPC 호출이 필요하며 프로그래밍 방식 인터페이스 사용을보다 명확하게 보여줍니다.

<< rpc_block >>에서는 먼저 블록 277316을 검색 한 다음 각 트랜잭션 ID를 참조하여 내부에있는 419 개의 트랜잭션을 각각 검색합니다. 그런 다음 각 트랜잭션의 출력을 반복하고 값을 더합니다.((("", startref="alicethree")))

[[rpc_block]]
.Retrieving a block and adding all the transaction outputs
====
[source,python]
----
include::code/rpc_block.py[]
----
====

Running this code, we get:

----
$ python rpc_block.py

('Total value in block: ', Decimal('10322.07722534'))
----

이 블록에서 처리되는 총 가치는 10,322.07722534 BTC (25 BTC 보상 및 수수료 0.0909 BTC 포함)입니다. 블록 해시 또는 높이를 검색하여 블록 탐색기 사이트에서보고 한 양과 비교하십시오. 일부 블록 탐색기는 보상을 제외하고 수수료를 제외하는 총 가치를보고합니다.((("", startref="BCapi03")))((("", startref="progint03")))

[[alt_libraries]]
=== Alternative Clients, Libraries, and Toolkits

((("Bitcoin Core", "alternatives to", id="BCalt03")))((("clients, libraries, and toolkits", id="clients03")))((("libraries, clients, and toolkits", id="librar03")))((("toolkits, libraries, and clients", id="toolkit03")))((("third-party API clients", id="thirdpart03")))비트 코인 생태계에는 많은 대체 클라이언트, 라이브러리, 툴킷 및 심지어 전체 노드 구현이 있습니다. 이들은 다양한 프로그래밍 언어로 구현되어 프로그래머가 기본 언어로 기본 인터페이스를 제공합니다. 다음 섹션에서는 프로그래밍 언어별로 정리 된 최고의 라이브러리, 클라이언트 및 툴킷을 나열합니다.

==== C/C++
https://github.com/bitcoin/bitcoin[Bitcoin Core] :: The reference implementation of bitcoin
https://github.com/libbitcoin/libbitcoin[libbitcoin]:: Cross-platform C++ development toolkit, node, and consensus library
https://github.com/libbitcoin/libbitcoin-explorer[bitcoin explorer]:: Libbitcoin's command-line tool
https://github.com/jgarzik/picocoin[picocoin]:: A C language lightweight client library for bitcoin by Jeff Garzik

==== JavaScript
http://bcoin.io/[bcoin]:: A modular and scalable full-node implementation with API
https://bitcore.io/[Bitcore] :: Full node, API, and library by Bitpay
https://github.com/bitcoinjs/bitcoinjs-lib[BitcoinJS] :: A pure JavaScript Bitcoin library for node.js and browsers

==== Java
https://bitcoinj.github.io[bitcoinj]:: A Java full-node client library
https://bitsofproof.com[Bits of Proof (BOP)]:: A Java enterprise-class implementation of bitcoin

==== Python
https://github.com/petertodd/python-bitcoinlib[python-bitcoinlib]::  A Python bitcoin library, consensus library, and node by Peter Todd
https://github.com/richardkiss/pycoin[pycoin]:: A Python bitcoin library by Richard Kiss
https://github.com/vbuterin/pybitcointools[pybitcointools]:: A Python bitcoin library by Vitalik Buterin

==== Ruby
https://github.com/sinisterchipmunk/bitcoin-client[bitcoin-client]:: A Ruby library wrapper for the JSON-RPC API

==== Go
https://github.com/btcsuite/btcd[btcd]:: A Go language full-node bitcoin client

==== Rust
https://github.com/apoelstra/rust-bitcoin[rust-bitcoin]:: Rust bitcoin library for serialization, parsing, and API calls

==== C#
https://github.com/MetacoSA/NBitcoin[NBitcoin]:: Comprehensive bitcoin library for the .NET framework

==== Objective-C
https://github.com/oleganza/CoreBitcoin[CoreBitcoin]:: Bitcoin toolkit for ObjC and Swift

Many more libraries exist in a variety of other programming languages and more are created all the time.((("", startref="BCalt03")))((("", startref="clients03")))((("", startref="thirdpart03")))((("", startref="toolkit03")))((("", startref="librar03")))
