[[ch07]]
[[adv_transactions]]
== 고급 트랜잭션 및 스크립팅

[[ch07_intro]]
=== 소개

이전 장에서는 비트 동전 트랜잭션의 기본 요소를 소개하고 가장 일반적인 트랜잭션 스크립트 인 P2PKH 스크립트를 살펴 보았습니다. 이 장에서는 고급 스크립팅과 복잡한 조건을 가진 트랜잭션을 빌드하는 데이 스크립트를 어떻게 사용할 수 있는지 살펴 보겠습니다.

우선 _multisignature_ 스크립트를 살펴 보겠습니다. 다음으로 가장 복잡한 두 번째 트랜잭션 스크립트 인 _Pay-to-Script-Hash_를 검토합니다.이 스크립트는 전 세계의 복잡한 스크립트를 엽니 다. 그런 다음 _timelocks_를 통해 비트 코인에 시간 차원을 추가하는 새로운 스크립트 연산자를 살펴 봅니다.

[[multisig]]
=== 다중 서명

((("transactions", "advanced", "multisignature scripts")))((("transactions", "advanced", id="Tadv07")))((("scripting", "multisignature scripts", id="Smulti07")))((("multisignature scripts")))다중 서명 스크립트는 N 개의 공개 키가 스크립트에 기록되는 조건을 설정하며 이들 중 적어도 M 명이 서명을 제공하여 자금을 잠금 해제해야합니다. 이는 M-of-N 스키마라고도하며, 여기서 N은 전체 키 수이고 M은 유효성 검사에 필요한 서명 임계 값입니다. 예를 들어 2/3 다중 서명은 3 개의 공개 키가 잠재적 서명자로 나열되고 이들 중 최소한 2 개가 유효한 거래를위한 서명을 작성하여 자금을 지출해야하는 경우입니다. 이때, 표준 다중 서명 스크립트는 최대 15 개의 나열된 공개 키로 제한됩니다. 즉, 1 : 1에서 15 : 15까지의 다중 서명 또는 해당 범위 내의 모든 조합을 수행 할 수 있습니다. 이 목록이 게시 될 때 목록에있는 15 개의 키 제한이 해제 될 수 있으므로 + isStandard () + 함수를 확인하여 현재 네트워크에서 허용되는 항목을 확인하십시오.

M-of-N 다중 서명 조건을 설정하는 잠금 스크립트의 일반적인 형태는 다음과 같습니다.

----
M <공개 키 1> <공개 키 2> ... <공개 키 N> N CHECKMULTISIG
----

여기서 N은 나열된 공개 키의 총 수이고 M은 출력을 소비하는 데 필요한 서명의 임계 값입니다.

2-of-3 다중 서명 조건을 설정하는 잠금 스크립트는 다음과 같습니다.

----
2 <공개 키 A> <공개 키 B> <공개 키 C> 3 CHECKMULTISIG
----

앞의 잠금 스크립트는 서명과 공개 키의 쌍을 포함하는 잠금 해제 스크립트로 충족 될 수 있습니다.

----
<서명 B> <서명 C>
----
또는 3 개의리스트 된 공개 키들에 대응하는 개인 키들로부터의 2 개의 서명들의 임의의 조합을 포함 할 수있다.

두 스크립트가 결합 된 유효성 검사 스크립트를 구성합니다.

----
<서명 B> <서명 C> 2 <공개 키 A> <공개 키 B> <공개 키 C> 3 CHECKMULTISIG
----

실행될 때 잠금 해제 스크립트가 잠금 스크립트에 의해 설정된 조건과 일치하는 경우에만이 결합 된 스크립트는 TRUE로 평가됩니다. 이 경우, 조건은 잠금 해제 스크립트가 3 개의 공개 키 중 2 개에 해당하는 2 개의 개인 키의 유효한 서명을 가지고 있는지 여부입니다.

[[multisig_bug]]
===== CHECKMULTISIG 실행의 버그

((("scripting", "multisignature scripts", "CHECKMULTISIG bug")))((("CHECKMULTISIG bug workaround")))++ CHECKMULTISIG ++의 실행에는 약간의 임시 해결책이 필요한 버그가 있습니다. + CHECKMULTISIG +가 실행되면 스택의 M + N + 2 항목을 매개 변수로 사용해야합니다. 그러나 버그로 인해 + CHECKMULTISIG +는 추가 값이나 예상보다 많은 값을 나타냅니다.

앞의 유효성 검증 예제를 사용하여 자세히 살펴 보겠습니다.

----
<서명 B> <서명 C> 2 <공개 키 A> <공개 키 B> <공개 키 C> 3 CHECKMULTISIG
----

먼저, + CHECKMULTISIG +는 맨 위 항목을 + N + (이 예제에서는 "3")로 팝합니다. 그런 다음 서명 할 수있는 공개 키인 + N + 항목을 팝합니다. 이 예에서는 공개 키 A, B 및 C가 있습니다. 그런 다음 하나의 항목 + + M +, 쿼럼 (몇 개의 서명이 필요한지)을 표시합니다. 여기에서 M = 2입니다.이 시점에서 + CHECKMULTISIG +는 서명 인 최종 + M + 항목을 표시하고 유효한지 확인해야합니다. 그러나 불행하게도, 구현상의 버그로 인해 + CHECKMULTISIG +가해야하는 것보다 하나 더 많은 항목 (M + 1 총)을 표시합니다. 추가 항목은 + CHECKMULTISIG + 자체에 직접적인 영향을 미치지 않도록 서명을 검사 할 때 무시됩니다. 그러나 존재하지 않으면 + CHECKMULTISIG +가 빈 스택을 팝하려고 시도 할 때 스택 오류 및 스크립트 실패 (트랜잭션을 유효하지 않은 것으로 표시)가 발생하므로 추가 값이 있어야합니다.

이 버그는 합의 규칙의 일부가 되었기 때문에 지금은 영원히 복제해야합니다. 따라서 올바른 스크립트 유효성 검사는 다음과 같습니다.

----
0 <서명 B> <서명 C> 2 <공개 키 A> <공개 키 B> <공개 키 C> 3 CHECKMULTISIG
----

따라서 multisig에서 실제로 사용되는 잠금 해제 스크립트는 다음과 같지 않습니다.

----
<서명 B> <서명 C>
----

하지만 대신 그것은 :

----
0 <서명 B> <서명 C>
----

이제부터는 multisig 잠금 해제 스크립트가 표시되면 처음에는 +0 +가 추가로 표시 될 것으로 예상되는데, 그 유일한 목적은 실수로 합의 규칙이 된 버그의 해결 방법입니다.((("", startref="Smulti07")))

[[p2sh]]
=== Pay-to-Script-Hash (P2SH)

((("transactions", "advanced", "Pay-to-Script-Hash")))((("scripting", "Pay-to-Script-Hash", id="Spay07")))Pay-to-Script-Hash to-Script-Hash (P2SH)는 복잡한 트랜잭션 스크립트의 사용을 크게 단순화하는 강력하고 새로운 유형의 트랜잭션으로 2012 년에 도입되었습니다. P2SH의 필요성을 설명하기 위해 실제 사례를 살펴 보겠습니다.

((("use cases", "import/export", id="mohamseven")))((("scripting", "Pay-to-Script-Hash", "import/export example")))((("Pay-to-Script-Hash (P2SH)", "import/export example")))<< ch01_intro_what_is_bitcoin >>에서는 두바이에 본사를 둔 전자 제품 수입 업체 인 Mohammed를 소개했습니다. Mohammed의 회사는 비트 코인의 멀티 시그니처 기능을 자사의 기업 계정에 광범위하게 사용합니다. 다중 서명 스크립트는 bitcoin의 고급 스크립팅 기능의 가장 일반적인 용도 중 하나이며 매우 강력한 기능입니다. (( "매출 채권 (AR)"))) 모하메드의 회사는 회계 용어로 "매출 채권"또는 AR로 알려진 모든 고객 지불에 다중 서명 스크립트를 사용합니다. 다중 서명 방식을 사용하면, 고객이 지불 한 금액은 Mohammed와 그의 파트너 중 하나 또는 백업 키를 가지고있는 변호사로부터 최소한 두 건의 서명을 요구하는 방식으로 고정되어 있습니다. 이와 같은 다중 시그니처 체계는 기업 지배 구조를 통제하고 도난, 횡령 또는 손실을 방지합니다.

결과 스크립트는 꽤 길고 다음과 같이 보입니다 :

----
2 <모하메드의 공개 키> <파트너 1 공개 키> <파트너 2 공개 키> <파트너 3 공개 키> <변호사 공개 키> 5 CHECKMULTISIG
----

다중 서명 스크립트는 강력한 기능이지만 사용하기 까다 롭습니다. 앞의 스크립트가 주어지면 모하메드는 지불 전에 모든 고객에게이 스크립트를 전달해야합니다. 각 고객은 커스텀 트랜잭션 스크립트를 생성 할 수있는 특별한 bitcoin wallet 소프트웨어를 사용해야하며 각 고객은 커스텀 스크립트를 사용하여 트랜잭션을 생성하는 방법을 이해해야합니다. 또한이 스크립트에는 매우 긴 공개 키가 포함되므로 결과 트랜잭션은 간단한 지불 트랜잭션보다 약 5 배 더 커집니다. 그 초대형 거래의 부담은 수수료 형태로 고객이 부담하게됩니다. 마지막으로, 이와 같은 대형 트랜잭션 스크립트는 모든 전체 노드의 RAM에있는 UTXO 세트에서 소비 될 때까지 전달됩니다.

P2SH는 이러한 실질적인 어려움을 해결하고 복잡한 스크립트를 비트 코인 주소로 지불하는 것처럼 쉽게 사용할 수 있도록 개발되었습니다. P2SH 결제를 사용하면 복잡한 잠금 스크립트가 암호화 된 해시 인 디지털 지문으로 대체됩니다. UTXO를 사용하려고하는 트랜잭션이 나중에 제시 될 때 잠금 해제 스크립트 외에 해시와 일치하는 스크립트를 포함해야합니다. 간단히 말해서 P2SH는 "이 해시와 일치하는 스크립트에 비용을 지불해야합니다.이 스크립트는 나중에이 출력을 소비 할 때 표시됩니다."

((("redeem scripts")))((("scripting", "redeem scripts")))P2SH 트랜잭션에서 해시로 대체되는 잠금 스크립트는 _redeem 스크립트로 참조됩니다. 시스템을 잠금 스크립트로 사용하는 대신 보너스 시간에 사용하십시오. << without_p2sh >>는 P2SH가없는 스크립트를 표시하고 << with_p2sh >>는 P2SH로 인코딩 된 스크립트를 보여줍니다.

[[without_p2sh]]
.P2SH없이 .Complex 스크립트
| =======
| 스크립트 잠그기 | 2 PubKey1 PubKey2 PubKey3 PubKey4 PubKey5 5 CHECKMULTISIG
| 잠금 해제 스크립트 | Sig1 Sig2
| =======

[[with_p2sh]]
.P2SH로 .Complex 스크립트
| =======
| 스크립트 사용 | 2 PubKey1 PubKey2 PubKey3 PubKey4 PubKey5 5 CHECKMULTISIG
| 스크립트 잠그기 | HASH160 <20 바이트의 사용 스크립트 해시> EQUAL
| 잠금 해제 스크립트 | Sig1 Sig2 <redeem script>
| =======

표에서 볼 수 있듯이 P2SH를 사용하면 출력 (지출 스크립트) 지출 조건을 자세히 설명하는 복잡한 스크립트가 잠금 스크립트에 표시되지 않습니다. 대신 해시 값만 잠금 스크립트에 있고 출력 스크립트를 사용할 때 잠금 해제 스크립트의 일부로 사용 디스크 자체가 나중에 표시됩니다. 이것은 수수료와 복잡성의 부담을 송금인으로부터 수령인 (지출자)으로 이동시킨다.

Mohammed의 회사, 복잡한 다중 서명 스크립트 및 결과로 나오는 P2SH 스크립트를 살펴 보겠습니다.

첫째, Mohammed의 회사가 고객으로부터받는 모든 지불에 사용하는 다중 서명 스크립트입니다.

----
2 <모하메드의 공개 키> <파트너 1 공개 키> <파트너 2 공개 키> <파트너 3 공개 키> <변호사 공개 키> 5 CHECKMULTISIG
----

플레이스 홀더가 실제 공개 키 (여기에서 04로 시작하는 520 비트 숫자로 표시됨)로 대체되면이 스크립트가 매우 길어지는 것을 볼 수 있습니다.

[역할 = "pagebreak-before"]
----
2
5 수표
----

이 전체 스크립트는 대신 SHA256 해싱 알고리즘을 적용한 다음 결과에 RIPEMD160 알고리즘을 적용하여 20 바이트 암호화 해시로 나타낼 수 있습니다. 앞의 스크립트의 20 바이트 해시는 다음과 같습니다.

----
54c557e07dde5bb6cb791c7a540e0a4796f5e97e
----

P2SH 트랜잭션은 잠금 스크립트를 사용하여 긴 스크립트 대신이 해시로 출력을 잠급니다.

----
HASH160 54c557e07dde5bb6cb791c7a540e0a4796f5e97e 동등한
----

보시다시피, 훨씬 더 짧습니다. "이 5 키 다중 서명 스크립트 지불"대신 P2SH 해당 트랜잭션은 "이 해시로 스크립트 지불"입니다. 모하메드의 회사에 돈을 지불하는 고객은 지불에이보다 짧은 잠금 스크립트 만 포함하면됩니다. 모하메드와 그의 파트너가이 UTXO를 사용하려면 다음과 같이 원래의 사용 스크립트 (해시가 UTXO를 잠근 사람)와 서명을 해제해야합니다.

----
<Sig1> <Sig2> <2 PK1 PK2 PK3 PK4 PK5 5 CHECKMULTISIG>
----

두 스크립트는 두 단계로 결합됩니다. 먼저, 해독 스크립트가 잠금 스크립트와 비교하여 해시가 일치하는지 확인합니다.

----
<2 PK1 PK2 PK3 PK4 PK5 5 CHECKMULTISIG> HASH160 <redeem scriptHash> EQUAL
----
사용 스크립트 해시가 일치하면 잠금 해제 스크립트가 자체적으로 실행되어 사용 스크립트의 잠금을 해제합니다.

----
<Sig1> <Sig2> 2 PK1 PK2 PK3 PK4 PK5 5 CHECKMULTISIG
----

이 장에서 설명하는 거의 모든 스크립트는 P2SH 스크립트로만 구현 될 수 있습니다. UTXO의 잠금 스크립트에는 직접 사용할 수 없습니다.((("", startref="mohamseven")))

==== P2SH 주소

((("scripting", "Pay-to-Script-Hash", "addresses")))((("Pay-to-Script-Hash (P2SH)", "addresses")))((("bitcoin improvement proposals", "Address Format for P2SH (BIP-13)")))P2SH 기능의 또 다른 중요한 부분은 BIP-13에 정의 된대로 스크립트 해시를 주소로 인코딩하는 기능입니다. P2SH 주소는 20 바이트 해시 스크립트의 Base58Check 인코딩으로, 비트 코인 주소는 공개 키의 20 바이트 해시를 Base58Check 인코딩 한 것과 같습니다. P2SH 주소는 버전 접두사 "5"를 사용하여 Base58Check로 인코딩 된 주소가 "3"으로 시작됩니다. 예를 들어 모하메드의 복잡한 스크립트 인 해시와 Base58Check로 P2SH 주소로 인코딩 된 스크립트는 + 39RF6JqABiHdYHkfChV6USGMe6Nsr66Gzw +가됩니다. 이제 모하메드는이 "주소" 그의 고객은 거의 모든 비트 코인 지갑을 사용하여 마치 비트 코인 주소처럼 간단한 지불을 할 수 있습니다. 3 접두사는 공개 키 대신 스크립트에 해당하는 특수한 유형의 주소라는 힌트를 제공하지만 그렇지 않으면 비트 코인 주소 지불 방식과 똑같은 방식으로 작동합니다.

P2SH 주소는 모든 복잡성을 숨기므로 지불하는 사람에게 스크립트가 표시되지 않습니다.

==== P2SH의 이점

((("scripting", "Pay-to-Script-Hash", "benefits of")))((("Pay-to-Script-Hash (P2SH)", "benefits of")))P2SH 기능은 (( "스크립팅", "유료 - 스크립트 해시" 잠금 출력에서 ​​복잡한 스크립트를 직접 사용하는 것에 비해 다음과 같은 이점이 있습니다.

* 복잡한 스크립트는 트랜잭션 출력에서 ​​더 짧은 지문으로 대체되어 트랜잭션을 작게 만듭니다.
* 스크립트는 주소로 코딩 할 수 있으므로 발신자와 발신자의 지갑에는 P2SH를 구현하기 위해 복잡한 엔지니어링이 필요하지 않습니다.
* P2SH는 스크립트를 작성하는 부담을 보낸 사람이 아닌받는 사람으로 바꿉니다.
* P2SH는 긴 스크립트의 데이터 저장에 대한 부담을 UTXO 집합에있는 출력에서 ​​입력 (블록 체인에 저장 됨)으로 이동합니다.
* P2SH는 긴 스크립트의 데이터 저장에 대한 부담을 현재 시간 (지불)에서 미래 시간 (지출 시점)으로 이동합니다.
* P2SH는 긴 스크립트의 거래 수수료 비용을 보낸 사람에서받는 사람으로 이동합니다.받는 사람은 긴 보충 스크립트를 사용하여이를 보내야합니다.

==== 스크립트 및 유효성 검사 사용

((("scripting", "Pay-to-Script-Hash", "redeem scripts and validation")))((("Pay-to-Script-Hash (P2SH)", "redeem scripts and validation")))((("redeem scripts")))((("validation")))Bitcoin Core 클라이언트 버전 0.9.2 이전에는 Pay-to-Script-Hash가 표준 유형의 Bitcoin 트랜잭션 스크립트로 제한되어 있었지만, + isStandard () + 함수에 의해. P2PK, P2PKH 또는 + RETURN + 및 P2SH 자체를 제외한 다중 속성 중 하나 일 수 있습니다.

Bitcoin Core 클라이언트의 버전 0.9.2부터 P2SH 트랜잭션에는 유효한 스크립트가 포함될 수 있으므로 P2SH 표준을 훨씬 유연하게 만들고 많은 새롭고 복잡한 유형의 트랜잭션을 실험 할 수 있습니다.

P2SH 사양은 재귀가 아니므로 P2SH를 P2SH redeem 스크립트에 넣을 수는 없습니다. 기술적으로 RETURN +를 redeem 스크립트에 포함시키는 것은 가능하지만, 규칙에있는 어떤 것도 그렇게 할 수 없으므로 유효성 검사 중에 + RETURN +을 실행하면 트랜잭션이 유효하지 않은 것으로 표시되기 때문에 실용적이지 않습니다.

P2SH 출력을 사용하기 전까지는 사용 스크립트가 네트워크에 표시되지 않으므로 유효하지 않은 사용 스크립트의 해시로 출력을 잠근 경우에는 관계없이 처리됩니다. UTXO가 성공적으로 잠길 것입니다. 그러나 사용 스크립트가 포함 된 지출 트랜잭션은 유효하지 않은 스크립트이기 때문에 허용되지 않으므로 지출 할 수 없습니다. 나중에 소비 할 수없는 P2SH에서 비트 코킹을 잠글 수 있기 때문에 위험이 있습니다. 네트워크는 P2SH 잠금 스크립트가 유효하지 않은 redeem 스크립트에 해당하는 경우에도 스크립트 해시가 나타내는 스크립트를 나타내지 않으므로 P2SH 잠금 스크립트를 수락합니다.((("", startref="Spay07")))

[경고]
====
((("warnings and cautions", "accidental bitcoin locking")))P2SH 잠금 스크립트에는 사용 스크립트 자체의 내용에 대한 단서를 제공하지 않는 사용 스크립트의 해시가 포함되어 있습니다. P2SH 거래는 유효하다고 간주되어 사용 스크립트가 유효하지 않은 경우에도 수락됩니다. 나중에 실수로 비트 코인을 잠글 수 없도록 나중에 잠글 수 있습니다.
====



[[op_return]]
=== 데이터 기록 출력 (RETURN)

((("transactions", "advanced", "data recording output")))((("scripting", "data recording output")))((("RETURN operator")))((("data recording (nonpayment data)")))((("nonpayment data")))((("blockchain (the)", "nonpayment data recording")))((("digital notary services")))Bitcoin의 배포 및 ( "("지불하지 않은 데이터 ")))) 블라인드 체인 인 timestamped ledger는 지불을 훨씬 넘어서는 잠재적 인 용도를 가지고 있습니다. 많은 개발자가 트랜잭션 스크립트 언어를 사용하여 디지털 공증 서비스, 주식 증서 및 현명한 계약과 같은 응용 프로그램에 대한 시스템의 보안 및 복원력을 활용하려고했습니다. 이러한 목적으로 bitcoin의 스크립트 언어를 사용하려는 초기 시도는 블록 체인에 데이터를 기록하는 트랜잭션 출력을 생성하는 것과 관련이있었습니다.

((("blockchain bloat")))((("bloat")))((("unspent transaction outputs (UTXO)")))((("UTXO sets")))비트 코인의 블록 체인을 사용하여 저장합니다 (( "("블록 체인 팽창 ")) bitcoin 지불과 관련없는 자료는 논쟁적인 주제입니다. 많은 개발자들은 그러한 사용이 악의적 인 것으로 간주하고 그것을 막으려합니다. 다른 사람들은이를 블록 체인 기술의 강력한 기능을 시연 한 것으로 간주하고 그러한 실험을 장려하고자합니다. 지불하지 않은 데이터를 포함시키려는 사람들은 블록 체인이 수행 할 의도가없는 데이터를 저장하기 위해 디스크 저장 비용을 들여 가득 차있는 비트 코인 노드를 실행하는 사람들에게 부담이되는 "블록 체인 팽창"을 일으킨다 고 주장합니다. 또한 이러한 트랜잭션은 대상 비트 코인 주소를 자유 형식 20 바이트 필드로 사용하여 보낼 수없는 UTXO를 만듭니다. 주소가 데이터에 사용되므로, 그것은 개인 키와 일치하지 않으며 결과 UTXO는 사용할 수 없습니다. 그것은 가짜 지불입니다. 따라서 절대 쓸모없는 이러한 트랜잭션은 UTXO 집합에서 제거되지 않으므로 UTXO 데이터베이스의 크기가 영원히 증가하거나 "부풀게"됩니다.

Bitcoin Core 클라이언트 버전 0.9에서는 + RETURN + 연산자가 도입되어 절충안에 도달했습니다. + RETURN +를 사용하면 개발자가 80 바이트의 비 지불 데이터를 트랜잭션 출력에 추가 할 수 있습니다. 그러나 "가짜"UTXO와 달리 + RETURN + 연산자는 명시 적으로 _provably unspendable_ 출력을 생성합니다.이 출력은 UTXO 집합에 저장할 필요가 없습니다. + RETURN + 출력은 블록 체인에 기록되므로 디스크 공간을 소비하고 블록 체인의 크기 증가에 기여하지만 UTXO 집합에 저장되지 않으므로 UTXO 메모리 풀이 부 풀리지 않으며 전체 노드에 비용이 들게됩니다 더 비싼 RAM.

+ RETURN + 스크립트는 다음과 같습니다.

----
RETURN <데이터>
----

((("Proof of Existence")))((("DOCPROOF prefix")))데이터 부분은 80 바이트로 제한되며 SHA256 알고리즘 (32 바이트)의 출력과 같이 해시를 나타내는 경우가 가장 많습니다. 많은 응용 프로그램은 응용 프로그램을 식별하는 데 도움이되는 데이터 앞에 접두어를 붙입니다. 예를 들어, http://proofofexistence.com [Proof of Existence] 디지털 공증 서비스는 8 바이트 접두사 + DOCPROOF +를 ​​사용합니다.이 접두사는 ASCII 인코딩으로 +44 4f 43 50 52 4f 4f 46+가 16 진수로 사용됩니다.

+ RETURN +에 해당하는 "잠금 해제 스크립트"가 + RETURN + 출력을 "소비"하는 데 사용할 수 있음을 명심하십시오. + RETURN +의 전체적인 요지는 그 출력에 잠긴 돈을 쓸 수 없다는 것입니다. 따라서 UTXO 세트에서 잠재적으로 지출 할 수있는 것으로 설정할 필요가 없습니다. + RETURN +은 _ 가능하게는 부과 할 수 없습니다. + RETURN +는 일반적으로 비트 코인이 0 인 출력입니다. 이러한 출력에 할당 된 비트 코인은 실제로 영원히 손실되기 때문입니다. + RETURN +가 트랜잭션의 입력으로 참조되면 스크립트 유효성 검사 엔진은 유효성 검사 스크립트의 실행을 중지하고 트랜잭션을 유효하지 않은 것으로 표시합니다. 기본적으로 + RETURN +를 실행하면 스크립트가 + FALSE + 및 중지로 "RETURN"됩니다. 따라서 실수로 + RETURN + 출력을 트랜잭션의 입력으로 참조하는 경우,

표준 트랜잭션 (+ isStandard () + 수표에 부합하는 트랜잭션)은 하나의 + RETURN + 출력 만 가질 수 있습니다. 그러나 하나의 + RETURN + 출력은 다른 유형의 출력과의 트랜잭션에서 결합 될 수 있습니다.

Bitcoin Core에는 두 가지 새로운 명령 행 옵션이 0.10 버전으로 추가되었습니다. 옵션 + datacarrier +는 + RETURN + 트랜잭션의 릴레이 및 마이닝을 제어하며 기본값은 "1"로 설정되어 있습니다. 옵션 + datacarriersize +는 + RETURN + 스크립트의 최대 크기 (디폴트로 83 바이트)를 지정하는 숫자 인수를 취합니다.이 인수는 + RETURN + 데이터의 최대 80 바이트와 + RETURN + opcode의 1 바이트와 + PUSHDATA + opcode.

[노트]
====
+ RETURN +는 초기에 80 바이트의 제한으로 제안되었지만 기능이 해제되었을 때 한계는 40 바이트로 줄어 들었습니다. 2015 년 2 월 Bitcoin Core 버전 0.10에서는 한도가 80 바이트로 다시 올라갔습니다. 노드는 중계하거나 + RETURN +을하지 않거나 80 바이트 미만의 데이터 만 포함하는 중계 및 광 + RETURN +을 선택할 수 있습니다.
====

=== Timelocks

((("transactions", "advanced", "timelocks")))((("scripting", "timelocks", id="Stimelock07")))((("nLocktime field")))((("scripting", "timelocks", "uses for")))((("timelocks", "uses for")))Timelocks는 특정 시점 이후의 지출 만 허용하는 트랜잭션 또는 출력에 대한 제한 사항입니다. Bitcoin은 처음부터 트랜잭션 수준의 타임 록 기능을 갖추고 있습니다. 트랜잭션의 + nLocktime + 필드로 구현됩니다. UTXO 레벨의 타임 록을 제공하는 2015 년 후반과 2016 년 중반에 두 가지 새로운 타임 록 기능이 도입되었습니다. 이들은 + CHECKLOCKTIMEVERIFY + 및 + CHECKSEQUENCEVERIFY +입니다.

Timelocks는 트랜잭션을 게시하고 미래의 날짜로 자금을 잠그는 데 유용합니다. 더 중요한 것은, timelock은 비트 코 인식 스크립팅을 시간 차원으로 확장하여 복잡한 다단계 스마트 계약의 문호를 여는 것입니다.

[[transaction_locktime_nlocktime]]
==== 트랜잭션 잠금 시간 (nLocktime)

((("scripting", "timelocks", "nLocktime")))((("timelocks", "nLocktime")))처음부터 bitcoin은 트랜잭션 수준의 타임 록 기능을 가지고 있습니다. 트랜잭션 잠금 시간은 트랜잭션이 유효하고 네트워크에서 릴레이되거나 블록 체인에 추가 될 수있는 가장 빠른 시간을 정의하는 트랜잭션 수준 설정 (트랜잭션 데이터 구조의 필드)입니다. Locktime은 Bitcoin Core 코드베이스에서 사용되는 변수 이름에서 + nLocktime +라고도합니다. 대부분의 트랜잭션에서 0으로 설정되어 즉시 전파 및 실행을 나타냅니다. + nLocktime +가 0이 아니고 5 억 미만이면 블록 높이로 해석됩니다. 즉, 트랜잭션이 유효하지 않고 지정된 블록 높이 이전에 블록 체인에 릴레이되거나 포함되지 않음을 의미합니다. 5 억 명이 넘으면, 이것은 Unix Epoch 시간 소인 (Jan-1-1970 년 이후 초)으로 해석되며 지정된 시간 이전에 트랜잭션이 유효하지 않습니다. 향후 블록 또는 시간을 지정하는 + nLocktime +과의 트랜잭션은 원래 시스템에서 보유하고 유효하게 된 후에 만 ​​bitcoin 네트워크로 전송되어야합니다. 지정된 + nLocktime + 이전에 트랜잭션이 네트워크로 전송되면 첫 번째 노드에서 트랜잭션이 유효하지 않은 것으로 간주되어 다른 노드로 릴레이되지 않습니다. + nLocktime +를 사용하는 것은 종이 수표를 사후 계산하는 것과 동일합니다. 지정된 + nLocktime + 이전에 트랜잭션이 네트워크로 전송되면 첫 번째 노드에서 트랜잭션이 유효하지 않은 것으로 간주되어 다른 노드로 릴레이되지 않습니다. + nLocktime +를 사용하는 것은 종이 수표를 사후 계산하는 것과 동일합니다. 지정된 + nLocktime + 이전에 트랜잭션이 네트워크로 전송되면 첫 번째 노드에서 트랜잭션이 유효하지 않은 것으로 간주되어 다른 노드로 릴레이되지 않습니다. + nLocktime +를 사용하는 것은 종이 수표를 사후 계산하는 것과 동일합니다.

[[locktime_limitations]]
===== 트랜잭션 잠금 시간 제한

+ nLocktime +은 미래에 일부 출력물을 사용할 수는 있지만 그 시간까지는 출력 할 수 없도록 제한하지 않습니다. 다음 예제를 통해 설명해 보겠습니다.

Alice는 자신의 출력 중 하나를 Bob의 주소로 보내는 트랜잭션에 서명하고 트랜잭션 + nLocktime +을 향후 3 개월로 설정합니다. (( "유스 케이스", "구매 커피", id = "alicesseven")) Alice는 보류 할 Bob에게 해당 트랜잭션을 전송합니다. 이 거래를 통해 앨리스 (Alice)와 밥 (Bob)은 다음과 같이 알고 있습니다.

* Bob은 3 개월이 경과 할 때까지 자금을 사용하기 위해 거래를 전송할 수 없습니다.
* Bob은 3 개월 후에 거래를 전송할 수 있습니다.

하나:

* Alice는 locktime없이 같은 입력을 두 번 소비하는 또 다른 트랜잭션을 생성 할 수 있습니다. 따라서 Alice는 3 개월이 지나기 전에 동일한 UTXO를 사용할 수 있습니다.
* Bob은 Alice가 그렇게하지 않을 것이라고 보장하지 않습니다.

트랜잭션 + nLocktime +의 한계를 이해하는 것이 중요합니다. 유일한 보장은 Bob이 3 개월이 경과하기 전에는 사용할 수 없다는 것입니다. Bob이 자금을 확보한다는 보장은 없습니다. 이러한 보장을 달성하려면 timelock 제한을 UTXO 자체에 배치해야하며 트랜잭션이 아닌 잠금 스크립트의 일부 여야합니다. 이것은 Check Lock Time Verify라고하는 다음 형태의 타임 록에 의해 달성됩니다.

==== 잠금 시간 확인 (CLTV) 확인

((("Check Lock Time Verify (CLTV)", id="cltv07")))((("timelocks", "Check Lock Time Verify (CLTV)")))((("scripting", "timelocks", "Check Lock Time Verify (CLTV)")))((("bitcoin improvement proposals", "CHECKLOCKTIMEVERIFY (BIP-65)")))2015 년 12 월 새로운 형태의 타임 로크가 비트 코인에 소프트 포크 업그레이드. BIP-65의 사양에 따라 스크립트 언어에 _CHECKLOCKTIMEVERIFY_ (_CLTV_)라는 새로운 스크립트 연산자가 추가되었습니다. + CLTV +는 + nLocktime +의 경우와 같이 트랜잭션 당 타임 록이 아닌 출력 단위의 타임 록입니다. 이렇게하면 타임 로크가 적용되는 방식에 훨씬 더 큰 유연성을 부여 할 수 있습니다.

간단히 말하면, 출력의 redeem 스크립트에 + CLTV + opcode를 추가하면 출력을 제한하므로 지정된 시간이 경과 한 후에 만 ​​소비 할 수 있습니다.

[팁]
====
+ nLocktime +는 트랜잭션 수준의 타임 록이지만 + CLTV +는 출력 기반의 타임 록입니다.
====

+ CLTV +는 + nLocktime +를 대체하지 않고 특정 UTXO를 향후 + nLocktime +이 더 크거나 같은 값으로 설정된 트랜잭션에서만 사용할 수 있도록 제한합니다.

+ CLTV + opcode는 + nLocktime + (블록 높이 또는 Unix 에포크 시간)와 같은 형식으로 표시된 하나의 매개 변수를 입력으로 사용합니다. + VERIFY + 접미사로 표시된 + CLTV +는 결과가 + FALSE + 인 경우 스크립트의 실행을 중단하는 opcode 유형입니다. 결과가 TRUE이면 실행이 계속됩니다.

+ CLTV +를 사용하여 출력을 잠 그려면 출력을 생성하는 트랜잭션의 출력 스크립트에 사용합니다. 예를 들어 Alice가 Bob의 주소를 지불하는 경우 출력에는 일반적으로 다음과 같은 P2PKH 스크립트가 포함됩니다.

----
DUP HASH160 <Bob의 공개 키 해시> EQUALVERIFY CHECKSIG
----

지금부터 3 개월 후에이 트랜잭션을 잠 그려면 트랜잭션을 P2SH 트랜잭션으로 바꾸고 다음과 같은 사용 스크립트를 사용합니다.

----
<지금 + 3 개월> CHECKLOCKTIMEVERIFY DUP DUP HASH160 <Bob의 공개 키 해시> EQUALVERIFY CHECKSIG
----

여기서 + <now {plus} 3 months> +는 트랜잭션이 마이닝 된 시점으로부터 3 개월 후 예상되는 블록 높이 또는 시간 값입니다. 현재 블록 높이 {plus} 12,960 (blocks) 또는 현재 Unix 신기원 시간 {plus} 7,760,000 (초) ). 지금은 + DROP + opcode + CHECKLOCKTIMEVERIFY +에 대해 걱정하지 마십시오. 곧 설명 될 것입니다.

Bob은이 UTXO를 사용하려고 할 때 UTXO를 입력으로 참조하는 트랜잭션을 생성합니다. 그는 해당 입력의 잠금 해제 스크립트에서 자신의 서명과 공개 키를 사용하고 트랜잭션 + nLocktime +를 + CHECKLOCKTIMEVERIFY + Alice 세트의 타임 록과 같거나 더 크게 설정합니다. 그런 다음 Bob은 비트 코인 네트워크에서 트랜잭션을 브로드 캐스팅합니다.

Bob의 거래는 다음과 같이 평가됩니다. + CHECKLOCKTIMEVERIFY + 매개 변수 앨리스 세트가 지출 트랜잭션의 + nLocktime +보다 작거나 같으면 스크립트 실행이 계속됩니다 (& xc, no operation & # x201d 또는 NOP opcode가 실행 된 것처럼 작동). 그렇지 않으면 스크립트 실행이 중지되고 트랜잭션은 유효하지 않은 것으로 간주됩니다.

보다 정확하게는 + CHECKLOCKTIMEVERIFY +가 실패하고 실행을 중지하고 트랜잭션을 유효하지 않은 것으로 표시하는 경우 if (source : BIP-65) :

1. 스택이 비어 있습니다. 또는
1. 스택의 맨 위 항목이 0보다 작습니다. 또는
1. 상단 스택 항목과 + nLocktime + 필드의 잠금 시간 유형 (높이 대 타임 스탬프)이 동일하지 않습니다. 또는
1. 최상위 스택 항목이 트랜잭션의 + nLocktime + 필드보다 큽니다. 또는
1. 입력의 + nSequence + 필드는 0xffffffff입니다.

[노트]
====
+ CLTV + 및 + nLocktime +는 Timelock을 설명하는 데 동일한 형식을 사용합니다. 블록 높이 또는 Unix 신기원 이후 경과 된 시간입니다. 비판적으로 함께 사용하면 + nLocktime +의 형식이 입력에서 + CLTV +의 형식과 일치해야하며 둘 다 블록 높이 또는 초 단위의 시간을 참조해야합니다.
====

실행 후, + CLTV +가 만족되면, 그 앞에 있던 시간 매개 변수는 스택의 최상위 항목으로 남게되며 후속 스크립트 opcode의 올바른 실행을 위해 + DROP +와 함께 삭제해야 할 수도 있습니다. 이러한 이유로 스크립트에서 + CHECKLOCKTIMEVERIFY +와 + DROP +가 자주 표시됩니다.

+ CLTV +와 함께 nLocktime을 사용하면 << locktime_limitations >>에 설명 된 시나리오가 변경됩니다. Alice가 UTXO 자체를 잠그기 때문에 Bob 또는 Alice가 3 개월 동안의 잠금 시간이 만료되기 전에는 UTXO를 사용하는 것이 불가능합니다 (( "" ", startref ="alicesseven ")))

timelock 기능을 스크립팅 언어에 직접 도입하여 + CLTV +를 사용하면 매우 흥미로운 복잡한 스크립트를 개발할 수 있습니다. (( "" ", startref ="cltv07 ")))

표준은 https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki[BIP-65 (CHECKLOCKTIMEVERIFY)]에 정의되어 있습니다.

==== 상대 Timelocks

+nLocktime+ and +CLTV+ are ((("timelocks", "relative timelocks", id="Trelative07")))((("scripting", "timelocks", "relative timelocks")))((("relative timelocks", id="relativetime07")))절대 시간을 지정한다는 점에서 둘 다 절대적으로 빠릅니다. 우리가 조사 할 다음 두 개의 타임 록 기능은 출력을 보내는 조건으로 블록 체인의 출력 확인으로부터 경과 된 시간을 지정한다는 점에서 _relative timelocks_입니다.

상대 timelock은 두 개 이상의 상호 의존적 인 트랜잭션의 체인이 체인에서 분리되도록 허용하고 이전 트랜잭션의 확인으로부터의 경과 시간에 의존하는 한 트랜잭션에 시간 제약을 부과하기 때문에 유용합니다. 즉, UTXO가 블록 체인에 기록 될 때까지 시계가 계산을 시작하지 않습니다. 이 기능은 << state_channels >>에서 볼 수 있듯이 양방향 주 채널 및 Lightning Networks에서 특히 유용합니다.

절대 시간 잠금과 같은 상대 시간 잠금은 트랜잭션 수준 기능과 스크립트 수준 opcode로 구현됩니다. 트랜잭션 수준의 상대적 타임 록은 모든 트랜잭션 입력에 설정된 트랜잭션 필드 인 + nSequence + 값에 대한 합의 규칙으로 구현됩니다. 스크립트 레벨의 상대 타임 록은 + CHECKSEQUENCEVERIFY + (CSV) 연산 코드로 구현됩니다.

((("bitcoin improvement proposals", "Relative lock-time using consensus-enforced sequence numbers (BIP-68)")))((("bitcoin improvement proposals", "CHECKSEQUENCEVERIFY (BIP-112)")))Relative timelocks are implemented according to the specifications in https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki[BIP-68, Relative lock-time using consensus-enforced sequence numbers] and https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki[BIP-112, CHECKSEQUENCEVERIFY].

BIP-68 및 BIP-112는 2016 년 5 월 합의 된 규칙에 대한 소프트 포크 업그레이드로 활성화되었습니다.

==== nSequence가있는 상대 Timelocks

((("nSequence field")))((("scripting", "timelocks", "relative timelocks with nSequence")))각각의 + nSequence + 필드를 설정하여 상대 타임 록을 트랜잭션의 각 입력에 설정할 수 있습니다 (( "(nSequence 필드) 입력.

===== nSequence의 원래 의미

+ nSequence + 필드는 원래 mempool에서 트랜잭션을 수정할 수 있도록 의도되었습니다 (그러나 제대로 구현되지 않았습니다). 이 경우, + nSequence + 값이 2 ^ 32 ^ (0xFFFFFFFF) 미만인 입력을 포함하는 트랜잭션은 아직 "완료되지 않은"트랜잭션을 나타냅니다. 그러한 트랜잭션은 더 높은 + nSequence + 값을 갖는 동일한 입력을 사용하는 다른 트랜잭션으로 대체 될 때까지 mempool에 보관됩니다. + nSequence + 값이 2 ^ 32 ^ 인 트랜잭션이 수신되면 "완료"되고 채굴 된 것으로 간주됩니다.

+ nSequence +의 원래 의미가 제대로 구현되지 않았고 + nSequence +의 값은 시간 보존을 사용하지 않는 트랜잭션에서 일반적으로 2 ^ 32 ^로 설정됩니다. nLocktime 또는 + CHECKLOCKTIMEVERIFY +가있는 트랜잭션의 경우, 타임 록 가드가 적용 되려면 + nSequence + 값을 2 ^ 32 ^보다 작게 설정해야합니다. 일반적으로 다음과 같이 설정됩니다. [<span class = "keep-together"> 2 <sup32> </ sup> & # x2013; 1 </ span>] (0xFFFFFFFE)입니다.

===== 컨센서스가 적용된 상대적 타임 록으로서의 nSequence

BIP-68의 활성화 이후 + nSequence + 값이 2 ^ 31 ^보다 작은 입력을 포함하는 모든 트랜잭션에 새로운 합의 규칙이 적용됩니다 (비트 1 << 31이 설정되지 않음). 프로그래밍 방식으로 이것은 가장 중요한 (비트 1 << 31)이 설정되지 않으면 "상대 잠금 시간"을 의미하는 플래그임을 의미합니다. 그렇지 않은 경우 (비트 1 << 31 집합), + nSequence + 값은 + CHECKLOCKTIMEVERIFY +, + nLocktime +, Opt-In-Replace-By-Fee 및 기타 향후 개발을 활성화하는 등의 다른 용도로 예약되어 있습니다.

+ nSequence + 값이 2 ^ 31 ^보다 작은 트랜잭션 입력은 상대적 시간 경과로 해석됩니다. 이러한 트랜잭션은 입력이 상대적 시간 잠금 값만큼 경과 한 후에 만 ​​유효합니다. 예를 들어, + nSequence + 상대 타임 록이 30 블록 인 하나의 입력을 가진 트랜잭션은 입력에서 참조 된 UTXO가 마이닝 된 때로부터 적어도 30 블록이 경과 한 경우에만 유효합니다. + nSequence +는 입력 필드마다 있기 때문에 트랜잭션에는 timelocked 된 입력이 여러 개 포함될 수 있습니다. 모든 입력은 트랜잭션이 유효 해 지도록 충분히 오래 있어야합니다. 트랜잭션은 타임 록 입력 (+ nSequence + <2 ^ 31 ^)과 상대 타임 록이없는 입력 (+ nSequence +> = 2 ^ 31 ^)을 모두 포함 할 수 있습니다.

+ nSequence + 값은 블록 또는 초 단위로 지정되지만 + nLocktime +에서 사용한 것과 약간 다른 형식으로 지정됩니다. 유형 플래그는 블록을 계산하는 값과 초 단위로 시간을 계산하는 값을 구별하는 데 사용됩니다. 타입 플래그는 23 번째 최하위 비트 (즉, 값 1 << 22)에 설정됩니다. type-flag가 설정되면 + nSequence + 값은 512 초의 배수로 해석됩니다. type-flag가 설정되지 않은 경우 + nSequence + 값은 블록 수로 해석됩니다.

+ nSequence +를 상대 타임 록으로 해석 할 때, 최하위 16 비트 만 고려됩니다. 플래그 (비트 32 및 23)가 평가되면 + nSequence + 값은 일반적으로 16 비트 마스크 (예 : + nSequence + 및 0x0000FFFF)로 "마스크"됩니다.

<< bip_68_def_of_nseq >>는 BIP-68에 정의 된 + nSequence + 값의 바이너리 레이아웃을 보여줍니다.

[[bip_68_def_of_nseq]]
.BIP-68 nSequence 인코딩의 정의 (출처 : BIP-68)
image::images/mbc2_0701.png["BIP-68 definition of nSequence encoding"]


+ nSequence + 값의 합의 시행에 근거한 상대적인 타임 록은 BIP-68에 정의되어 있습니다.

표준은 https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki[BIP-68, 합의 - 시행 순서 번호를 사용하는 상대 잠금 시간]에 정의되어 있습니다.

==== CSV가있는 상대 Timelocks

((("scripting", "timelocks", "relative timelocks with CHECKSEQUENCEVERIFY")))((("CHECKSEQUENCEVERIFY (CSV)")))CLTV 및 + nLocktime +과 마찬가지로, 상대 타임 록에 대한 스크립트 연산 코드가 있습니다.이 opcode는 다음을 활용합니다. (( "스크립팅", "타임 로크", CHECKSEQUENCEVERIFY가있는 상대적 타임 록) + nSequence + 값은 스크립트에 있습니다. 그 opcode는 + CHECKSEQUENCEVERIFY +이며, 일반적으로 + CSV +라고도합니다.

UTXO의 보충 스크립트에서 평가할 때 + CSV + opcode는 + nSequence + 값이 + CSV + 매개 변수보다 크거나 같은 트랜잭션에서만 사용할 수 있습니다. 본질적으로 이는 UTXO가 채굴 된 시간에 비해 특정 수의 블록 또는 초가 경과 할 때까지 UTXO를 소비하는 것을 제한합니다.

CLTV에서와 마찬가지로 + CSV +의 값은 해당 + nSequence + 값의 형식과 일치해야합니다. + CSV +가 블록 단위로 지정되면 + nSequence +가 반드시 필요합니다. + CSV +가 초 단위로 지정되면 + nSequence +도 같아야합니다.

+ CSV +가있는 상대 타임 록은 여러 체인 된 이벤트가 만들어지고 서명되지만 "오프 체인 (off-chain)"상태로 유지 될 때 전파되지 않을 때 특히 유용합니다. 부모 트랜잭션이 상대적 시간 제한에 지정된 시간까지 전파, 채굴 및 에이즈 될 때까지 하위 트랜잭션을 사용할 수 없습니다. << state_channels >> 및 << lightning_network >> ((( "start"= "relativetime07"))) (( "" ", startref ="Trelative07 ")))에서이 사용 사례의 한 응용 프로그램을 볼 수 있습니다.

+ CSV +는 https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki[BIP-112, CHECKSEQUENCEVERIFY]에 자세히 정의되어 있습니다.


==== 중간 - 시간 - 과거

((("scripting", "timelocks", "Median-Tme-Past")))((("Median-Tme-Past")))((("timelocks", "Median-Tme-Past")))상대 타임 록의 활성화의 일환으로 타임 클록 (절대 및 상대)에 대해 "시간"이 계산되는 방식이 변경되었습니다. 비트 코인에는 벽 시간과 합의 시간 사이에 미묘하지만 매우 중요한 차이가 있습니다. 비트 코인 (Bitcoin)은 분산 된 네트워크로서, 각 참가자는 시간에 대한 자신의 시각을 가지고 있음을 의미합니다. 네트워크상의 이벤트가 모든 곳에서 즉각적으로 발생하지는 않습니다. 네트워크 대기 시간은 각 노드의 관점에 포함되어야합니다. 결국 모든 것은 동기화되어 공통 원장을 만듭니다. Bitcoin은 _past_에 존재했던 원장 상태에 대해 10 분마다 합의에 도달합니다.

블록 헤더에 설정된 타임 스탬프는 광부에 의해 설정됩니다. 합의 된 규칙에 의해 허용되는 어느 정도의 위도가 분산 된 노드 사이의 시계 정확도의 차이를 설명합니다. 그러나 이것은 광부들이 한 블록 내에 시간에 대해 거짓말을하여 아직 성숙하지 않은 timelocked 거래를 포함시켜 추가 비용을 벌 수 있다는 불행한 인센티브를 만듭니다. 자세한 내용은 다음 섹션을 참조하십시오.

타임 록의 보안을 강화하고 강화하기위한 인센티브를 없애기 위해 BIP가 제안되어 상대적 타임로에 대한 BIP와 동시에 활성화되었습니다. 이것은 BIP-113으로, _Median-Time-Past_라고하는 새로운 합의 시간 측정을 정의합니다.

Median-Time-Past는 마지막 11 블록의 타임 스탬프를 취하여 중간 값을 찾아 계산합니다. 그 중간 시간은 일치 시간이되며 모든 시간 기록 계산에 사용됩니다. 과거에 약 2 시간의 중간 지점을 가져 가면 어떤 블록의 타임 스탬프의 영향이 줄어 듭니다. 11 개의 블록을 통합함으로써 아직 성숙되지 않은 타임 록과의 거래에서 수수료를 얻기 위해 단일 광부가 타임 스탬프에 영향을 줄 수 없습니다.

Median-Time-Past는 + nLocktime +, + CLTV +, + nSequence + 및 + CSV +에 대한 시간 계산 구현을 변경합니다. Median-Time-Past로 계산 된 합의 시간은 항상 벽시계 시간보다 약 1 시간 늦습니다. 타임 록 트랜잭션을 생성하는 경우 + nLocktime +, + nSequence +, + CLTV + 및 + CSV +로 인코딩 할 원하는 값을 예측할 때이를 계산해야합니다.

Median-Time-Past는 https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki[BIP-113]에 명시되어 있습니다.

[[fee_sniping]]
==== Timelock Defense Against 수수료 저격

((("scripting", "timelocks", "defense against fee-sniping")))((("timelocks", "defense against fee-sniping")))((("fees", "fee sniping")))((("security", "defense against fee-sniping")))((("sniping")))저격은 이론적 인 공격 시나리오로, 과거 블록을 다시 쓰려고 시도하는 광부가 더 높은 수수료를 부과합니다. 향후 수익을 최대화하기위한 거래

예를 들어, 존재하는 가장 높은 블록이 블록 # 100,000이라고 가정 해 봅시다. 체인을 확장하기 위해 # 100,001 블록을 채굴하려고 시도하는 대신 일부 광부가 # 100,000을 회수하려고 시도합니다. 이 광부는 후보 블록 # 100,000에 유효한 거래 (아직 채굴되지 않은 거래)를 포함하도록 선택할 수 있습니다. 그들은 동일한 거래로 블록을 다시 채울 필요가 없습니다. 실제로, 그들은 그들의 블록에 포함시킬 가장 수익성이 높은 (kB 당 최고 수수료) 거래를 선택하는 인센티브를 가지고 있습니다. "이전"블록 # 100,000에 있었던 트랜잭션과 현재 mempool의 트랜잭션을 포함 할 수 있습니다. 본질적으로 그들은 블록 # 100,000을 다시 만들 때 "현재"에서 다시 작성된 "과거"로 거래를 끌어낼 수있는 옵션을 가지고 있습니다.

블록 보상은 블록 당 총 비용보다 훨씬 높기 때문에 오늘날이 공격은 그리 비싸지 않습니다. 그러나 미래의 어느 시점에서 거래 수수료는 대부분의 보상 (또는 보상 전체)이 될 것입니다. 그 때,이 시나리오는 피할 수 없게됩니다.

Bitcoin Core가 트랜잭션을 생성 할 때 "수수료 저격"을 방지하기 위해 기본적으로 + nLocktime +을 사용하여 "다음 블록"으로 제한합니다. 이 시나리오에서 Bitcoin Core는 생성 된 모든 트랜잭션에서 + nLocktime +을 100,001로 설정합니다. 정상적인 상황에서이 + nLocktime +는 아무런 영향을 미치지 않으며 & # x2014; 거래는 # 100,001 블록에만 포함될 수 있습니다. 그것은 다음 블록입니다.

그러나 블록 체인 포크 공격으로 광부들은 mempool에서 고액 거래를 할 수 없었습니다. 왜냐하면 모든 거래가 timelocked되어 # 100,001을 차단하기 때문입니다. 그들은 그 당시에 유효한 거래가 있더라도 # 100,000만을 회수 할 수 있으며, 근본적으로 새로운 수수료는 없습니다.

이를 달성하기 위해 Bitcoin Core는 모든 새 트랜잭션에 대해 + nLocktime +을 <현재 블록 # + 1>로 설정하고 모든 입력에 + nSequence +를 0xFFFFFFFE로 설정하여 + nLocktime +을 활성화합니다.((("", startref="Stimelock07")))

=== 흐름 제어 (조건절)가있는 스크립트

((("transactions", "advanced", "flow control scripts")))((("scripting", "flow control scripts", id="Sflow07")))((("conditional clauses", id="condition07")))((("flow control", id="flow07")))Bitcoin Script의보다 강력한 기능 중 하나는 흐름 제어 (조건부 절)입니다. + IF ... THEN ... ELSE + 구문을 사용하는 다양한 프로그래밍 언어의 흐름 제어에 익숙합니다. Bitcoin 조건절은 조금 다르게 보이지만 본질적으로 같은 구조입니다.

기본적인 수준에서, bitcoin 조건부 opcode는 논리적 조건을 평가 한 + TRUE + / + FALSE + 결과에 따라 잠금 해제되는 두 가지 방법이있는 redeem 스크립트를 구성 할 수있게 해줍니다. 예를 들어, x가 + TRUE +이면 회수 스크립트는 A이고 ELSE 회수 스크립트는 B입니다.

또한 Bitcoin 조건부 표현식은 무기한으로 "중첩"될 수 있습니다. 즉, 조건부에 다른 조건이 포함될 수 있음을 의미합니다. Bitcoin 스크립트 흐름 제어는 수백 또는 수천 개의 가능한 실행 경로가있는 매우 복잡한 스크립트를 작성하는 데 사용될 수 있습니다 . 중첩에는 제한이 없지만 합의 규칙은 스크립트의 최대 크기 (바이트)에 제한을 부과합니다.

Bitcoin은 + IF +, + ELSE +, + ENDIF + 및 + NOTIF + opcode를 사용하여 흐름 제어를 구현합니다. 또한 조건부 표현식에는 + BOOLAND +, pass : [<span class = "keep-together"> <code> BOOLOR </ code> </ span>] 및 + NOT +와 같은 부울 연산자가 포함될 수 있습니다.

언뜻보기에 비트 코인의 흐름 제어 스크립트가 혼란 스러울 수 있습니다. Bitcoin Script는 스택 언어이기 때문입니다. + 1 ADD +로 표현할 때 +1 {plus} 1+이 "backward"로 보이는 것과 같은 방식으로 비트 코인의 흐름 제어 절도 "뒤쪽"으로 보입니다.

대부분의 전통적인 (절차 적) 프로그래밍 언어에서 흐름 제어는 다음과 같이 보입니다.

. 대부분의 프로그래밍 언어에서 흐름 제어의 의사 코드
----
if (조건) :
  조건이 참일 때 실행할 코드
그밖에:
  조건이 거짓 일 때 실행할 코드
어느 경우이든 실행할 코드
----

Bitcoin Script와 같은 스택 기반 언어에서 논리적 조건은 + IF + 앞에옵니다. 다음과 같이 "뒤로"보입니다.

.Bitcoin 스크립트 흐름 제어
----
조건
만약
  조건이 참일 때 실행할 코드
그밖에
  조건이 거짓 일 때 실행할 코드
ENDIF
어느 경우이든 실행할 코드
----

Bitcoin Script를 읽을 때, 평가되는 조건은 + IF + opcode 이전에옵니다.

==== VERIFY Opcode가있는 조건부 절

((("VERIFY opcodes")))((("IF clauses")))((("opcodes", "VERIFY")))Bitcoin 스크립트에서 조건의 또 다른 형태는 + VERIFY +로 끝나는 모든 opcode입니다. + VERIFY + 접미사는 평가 된 조건이 + TRUE +가 아닌 경우 스크립트 실행이 즉시 종료되고 트랜잭션이 유효하지 않은 것으로 간주 함을 의미합니다.

((("guard clauses")))대체 실행 경로를 제공하는 + IF + 절과 ​​달리 + VERIFY + 접미사는 _guard 절로 작동하며 전제 조건이 충족되는 경우에만 계속됩니다.

예를 들어, 다음 스크립트에는 Bob의 서명과 특정 해시를 생성하는 사전 이미지 (비밀)가 필요합니다. 잠금을 해제하려면 두 가지 조건이 충족되어야합니다.

.+ EQUALVERIFY + guard 절을 사용하여 스크립트를 사용합니다.
----
HASH160 <예상 해시> EQUALVERIFY <Bob의 Pubkey> CHECKSIG
----

이것을 사용하려면 Bob은 유효한 사전 이미지와 서명을 제시하는 잠금 해제 스크립트를 구성해야합니다.

위의 redeem 스크립트를 만족시키는 잠금 해제 스크립트
----
<Bob 's Sig> <해시 사전 이미지>
----

사전 이미지를 제시하지 않으면 Bob은 자신의 서명을 확인하는 스크립트 부분에 도달 할 수 없습니다.

이 스크립트는 대신 + IF +로 작성할 수 있습니다.

. + IF + guard 절이있는 스크립트 사용
----
HASH160 <예상 해시> EQUAL
만약
   <Bob 's Pubkey> CHECKSIG
ENDIF
----

Bob의 잠금 해제 스크립트는 동일합니다.

위의 redeem 스크립트를 만족시키는 잠금 해제 스크립트
----
<Bob 's Sig> <해시 사전 이미지>
----

+ IF +가있는 스크립트는 + VERIFY + 접미사가있는 opcode와 동일한 작업을 수행합니다. 둘 다 가드 절로 작동합니다. 그러나 + VERIFY + 구성은 더 적은 op 코드를 사용하여보다 효율적입니다.

그러면 언제 + VERIFY +를 사용하고 언제 + IF +를 사용합니까? 우리가하려는 모든 일이 전제 조건 (guard 절)을 첨부하는 것이면 + VERIFY +가 더 좋습니다. 그러나 하나 이상의 실행 경로 (흐름 제어)가 필요하다면 + IF ... ELSE + 흐름 제어 절이 필요합니다.

[팁]
====
((("EQUAL opcode")))((("opcodes", "EQUAL")))((("EQUALVERIFY opcode")))((("opcodes", "EQUALVERIFY")))opcode와 같은 (opcodes ","EQUAL "))) () (("EQUAL opcode ")) + EQUAL +는 결과 (+ TRUE + / + FALSE +)를 스택으로 밀어 넣고, 후속 op 코드에 의한 평가를 위해 거기에 남겨 둡니다. 반대로 opcode + EQUALVERIFY + 접미어는 스택에 아무 ​​것도 남기지 않습니다. + VERIFY +로 끝나는 연산 코드는 결과를 스택에 남겨 두지 않습니다.
====

==== 스크립트에서 흐름 제어 사용

Bitcoin Script에서 흐름 제어에 대한 일반적인 용도는 여러 실행 경로를 제공하는 사용 스크립트를 구성하는 것입니다. 각 실행 경로는 UTXO를 사용하는 다른 방법입니다.

((("use cases", "buying coffee")))우리는 두 명의 서명자 인 앨리스 (Alice)와 밥 (Bob)이있는 간단한 예를 보자. 둘 중 하나는 사용할 수있다. multisig를 사용하면 1-of-2 multisig 스크립트로 표시됩니다. 데모를 위해 + IF 절을 사용하여 동일한 작업을 수행합니다.

----
만약
 <Alice 's Pubkey> CHECKSIG
그밖에
 <Bob 's Pubkey> CHECKSIG
ENDIF
----

이 보충 스크립트를 보면 궁금해 할 수 있습니다. "조건은 어디에 있습니까? IF + 절 앞에는 아무 것도 없습니다!"

조건은 사용 스크립트의 일부가 아닙니다. 대신, 조건은 잠금 해제 스크립트에서 제공되어 Alice와 Bob이 원하는 실행 경로를 "선택할"수 있습니다.

앨리스는 잠금 해제 스크립트로 이것을 사용합니다.
----
<앨리스의 신호> 1
----

마지막에 +1은 + IF + 절이 앨리스가 서명을 가진 첫 번째 사용 경로를 실행하게하는 조건 (+ TRUE +)으로 사용됩니다.

Bob이 이것을 사용하려면 + IF + 절에 + FALSE + 값을 제공하여 두 번째 실행 경로를 선택해야합니다.

----
<Bob 's Sig> 0
----

Bob의 잠금 해제 스크립트는 스택에 +0+를 넣고 + IF + 절이 Bob의 서명이 필요한 두 번째 (+ ELSE +) 스크립트를 실행하게합니다.

+ IF + 절은 중첩 될 수 있으므로 실행 경로의 "미로"를 만들 수 있습니다. 잠금 해제 스크립트는 실제로 실행되는 실행 경로를 선택하는 "맵"을 제공 할 수 있습니다.

----
만약
  스크립트 A
그밖에
  만약
    스크립트 B
  그밖에
    스크립트 C
  ENDIF
ENDIF
----

이 시나리오에는 세 가지 실행 경로 (+ 스크립트 A +, + 스크립트 B + 및 + 스크립트 C +)가 있습니다. 잠금 해제 스크립트는 + TRUE + 또는 + FALSE + 값의 순서로 경로를 제공합니다. 예를 들어 경로 + 스크립트 B +를 선택하려면 잠금 해제 스크립트가 +1 ++ (+ TRUE +, + FALSE +)로 끝나야합니다. 이 값은 스택에 푸시 (push)되므로 두 번째 값 (+ FALSE +)은 스택 맨 위에서 끝납니다. 외부 + IF + 절은 + FALSE + 값을 팝하고 첫 번째 + ELSE + 절을 실행합니다. 그런 다음 + TRUE + 값이 스택 맨 위로 이동하고 + B + 실행 경로를 선택하여 내부 (중첩) + IF +에 의해 평가됩니다.

이 구조를 사용하여 수십 또는 수백 개의 실행 경로가있는 사용 스크립트를 만들 수 있습니다. 각 실행 경로는 UTXO를 사용할 수있는 다른 방법을 제공합니다. 우리는 각 흐름 제어 지점에서 적절한 + TRUE + 및 + FALSE + 값을 스택에 놓음으로써 실행 경로를 탐색하는 잠금 해제 스크립트를 생성합니다 (( "" ","startref = "Sflow07")) ", startref ="flow07 "))) ((" "", startref = "condition07")))

=== 복잡한 스크립트 예제

((("transactions", "advanced", "example")))((("scripting", "complex script example", id="Scomplex07")))이 절에서는이 장의 많은 개념을 결합합니다 (( "("transactions ","advanced ","example ")))) 하나의 예제로.

(예 : "사용 사례", "가져 오기 / 내보내기", id = "mohamseventwo")))이 예에서는 두바이의 회사 소유주 인 수출입 업무를 담당하는 Mohammed의 이야기를 사용합니다.

((("transactions", "advanced", "multisignature scripts")))((("scripting", "multisignature scripts", "import/export example")))((("multisignature scripts")))이 예에서는 모하메드가 유연한 규칙을 사용하여 회사 자본 계정을 구성하고자합니다. 그가 만드는 구성표에는 시간 경과에 따라 다양한 권한 수준이 필요합니다. multisig 계획의 참가자는 모하메드, 그의 두 파트너 Saeed와 Zaira, 그리고 그들의 회사 변호사 Abdul입니다. 세 파트너는 다수 규칙에 따라 의사 결정을 내므로 세 사람 중 두 사람이 동의해야합니다. 그러나 열쇠에 문제가있는 경우 변호사는 세 파트너 서명 중 하나를 사용하여 자금을 회수 할 수 있기를 원합니다. 마지막으로, 모든 파트너가 사용할 수 없거나 잠시 동안 무능력 해지면,

다음은 모하메드가이를 달성하기 위해 고안 한 스크립트입니다.

. Timelock이있는 가변 멀티 서명
----
만약
  만약
    2
  그밖에
    <30 일> CHECKSEQUENCEVERIFY DROP
    <변호사의 Pubkey 압둘> CHECKSIGVERIFY
    1
  ENDIF
  <모하메드의 Pubkey> <Saeed의 Pubkey> <Zaira의 Pubkey> 3 CHECKMULTISIG
그밖에
  <90 일> CHECKSEQUENCEVERIFY DROP
  <변호사의 Pubkey 압둘> CHECKSIG
ENDIF
----

Mohammed의 스크립트는 중첩 + IF ... ELSE + 흐름 제어 절을 사용하여 세 개의 실행 경로를 구현합니다.

첫 번째 실행 경로에서이 스크립트는 세 파트너와 함께 간단한 2-of-3 multisig로 작동합니다. 이 실행 경로는 3 행과 9 행으로 구성됩니다. 3 행은 multisig의 쿼럼을 +2+ (2-of-3)로 설정합니다. 이 실행 경로는 잠금 해제 스크립트 끝에서 + TRUE TRUE +를 입력하여 선택할 수 있습니다.

. 첫 번째 실행 경로에 대한 잠금 해제 스크립트 (2-of-3 multisig)
----
0 <모하메드의 시그> <자이라의 시그> TRUE TRUE
----


[팁]
====
이 잠금 해제 스크립트의 시작 부분에 +0+가있는 것은 + CHECKMULTISIG +의 버그로 인해 스택에서 추가 값이 나옵니다. 추가 값은 + CHECKMULTISIG +에 의해 무시되지만 반드시 있어야합니다. 그렇지 않으면 스크립트가 실패합니다. << multisig_bug >>에 설명 된대로 +0 + (일반적으로)를 눌러 버그를 해결할 수 있습니다.
====

두 번째 실행 경로는 UTXO 작성 후 30 일이 경과 한 후에 만 ​​사용할 수 있습니다. 그 당시 변호사와 3 명의 파트너 중 한 명인 Abdul의 서명이 필요합니다 (1-of-3 multisig). 이것은 multisig에 대한 쿼럼을 +1 +로 설정하는 7 행에 의해 수행됩니다. 이 실행 경로를 선택하려면 잠금 해제 스크립트가 + FALSE TRUE +로 끝나야합니다.

. 두 번째 실행 경로에 대한 잠금 해제 스크립트 (변호사 +1)
----
0 <Saeed 's Sig> <Abdul 's Sig> 거짓 진실
----

[팁]
====
왜 + FALSE TRUE +입니까? 그게 뒤로 있지 않니? 두 값이 스택에 푸시되기 때문에 + FALSE +를 먼저 누른 다음 + TRUE +를 두 번째로 밀면됩니다. 따라서 첫 번째 + IF + opcode에 의해 + TRUE +가 첫 번째로 팝됩니다.
====

마지막으로, 세 번째 실행 경로는 압둘 (Abdul) 변호사가 자금을 혼자서 보낼 수있게하지만, 90 일 후에 만 ​​가능합니다. 이 실행 경로를 선택하려면 잠금 해제 스크립트가 + FALSE +로 끝나야합니다.

. 세 번째 실행 경로에 대한 잠금 해제 스크립트 (변호사 전용)
----
<Abdul 's Sig> 거짓말
----

스크립트가 스택에서 어떻게 작동하는지 보려면 종이에서 스크립트를 실행 해보십시오.

이 예를 읽을 때 고려해야 할 몇 가지 사항. 답변을 찾을 수 있는지 확인하십시오.

* 왜 변호사는 잠금 해제 스크립트에서 + FALSE +로 선택하여 언제든지 세 번째 실행 경로를 사용할 수 있습니까?

UTXO가 채굴 된 후 각각 5, 35, 105 일 동안 사용할 수있는 실행 경로 수는 얼마입니까?

* 변호사가 그의 열쇠를 분실하면 기금이 분실됩니까? 91 일이 경과하면 답변이 변경됩니까?

* 파트너가 변호사가 기금에 ​​접근하는 것을 막기 위해 29 일 또는 89 일마다 어떻게 시계를 재설정합니까?

*이 스크립트의 일부 + CHECKSIG + 연산 코드는 + VERIFY + 접미사를 갖는 반면 다른 연산자는 그렇지 않은 이유는 무엇입니까?((("", startref="Tadv07")))((("", startref="Scomplex07")))((("", startref="mohamseventwo")))
