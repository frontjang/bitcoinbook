[[ch05_wallets]]
== 지갑

((("wallets", "defined")))"wallet"이라는 단어는 비트 동전으로 된 몇 가지 다른 것들을 설명하기 위해 사용됩니다.

높은 수준에서 지갑은 기본 사용자 인터페이스로 사용되는 응용 프로그램입니다. 지갑은 사용자의 돈 액세스, 키 및 주소 관리, 잔액 추적 및 트랜잭션 작성 및 서명을 제어합니다.

프로그래머의 관점에서 보면 "지갑"이라는 단어는 사용자의 키를 저장하고 관리하는 데 사용되는 데이터 구조를 의미합니다.

이 장에서는 두 번째 의미를 살펴볼 것입니다. 여기서 지갑은 개인 키에 대한 컨테이너이며 일반적으로 구조화 된 파일이나 간단한 데이터베이스로 구현됩니다.

=== 월렛 기술 개요

이 섹션에서는 사용자 친화적이고 안전하며 유연한 비트 동전 지갑을 구성하는 데 사용되는 다양한 기술을 요약합니다.

((("wallets", "contents of")))비트 코인에 대한 일반적인 오해는 비트 코인 지갑에 비트 코인이 들어 있다는 것입니다. 사실 지갑에는 열쇠 만 들어 있습니다. "코인"은 비트 코인 네트워크의 블록 체인에 기록됩니다. 사용자는 지갑의 키를 사용하여 트랜잭션에 서명함으로써 네트워크의 동전을 제어합니다. ((( "keychains"))) 어떤 의미에서 비트 코인 지갑은 키 체인입니다.

[팁]
====
Bitcoin 지갑에는 동전이 아닌 열쇠가 들어 있습니다. 각 사용자에게는 키가 들어있는 지갑이 있습니다. 지갑은 실제로 개인 / 공개 키 쌍을 포함하는 키 체인입니다 (<< private_public_keys >> 참조). 사용자는 키를 사용하여 거래를 서명함으로써 거래 출력 (동전)을 소유하고 있음을 증명합니다. 동전은 트랜잭션 출력 형태로 블록 체인에 저장됩니다 (종종 vout 또는 txout으로 표시됨).
====

((("wallets", "types of", "primary distinctions")))포함 된 열쇠가 서로 관련되어 있는지 여부에 따라 구별되는 두 가지 기본 유형의 지갑입니다.

((("JBOK wallets", seealso="wallets")))((("wallets", "types of", "JBOK wallets")))((("nondeterministic wallets", seealso="wallets")))첫 번째 유형은 _nondeterministic wallet_이며 각 키는 임의의 숫자와 독립적으로 생성됩니다. 키는 서로 관련이 없습니다. 이 유형의 지갑은 "Just a Bunch of Keys"구에서 JBOK 지갑으로도 알려져 있습니다.

((("deterministic wallets", seealso="wallets")))두 번째 유형의 지갑은 _ 결정적 wallet_이며 모든 키는 _seed_라고하는 단일 마스터 키에서 파생됩니다. 이 유형의 지갑에있는 모든 키는 서로 관련이 있으며 원래 시드가 있으면 다시 생성 할 수 있습니다. ((( "키 파생 메소드"))) 결정 론적 지갑에는 여러 가지 _key derivation_ 메소드가 사용됩니다. (( "계층 적 결정적 (HD) 지갑", seealso = "지갑"))) 가장 일반적으로 사용되는 파생 방법은 트리 유사 구조를 사용하며 _ 결정적 또는 _HD_ 지갑이라고합니다.

((("mnemonic code words")))결정 론적 지갑은 시드에서 초기화됩니다. 이를 사용하기 쉽게하기 위해 씨앗은 영어 단어로 인코딩됩니다.이 단어는 _Mnemonic 코드 단어라고도합니다.

다음 몇 개 섹션에서는 이러한 각 기술을 높은 수준에서 소개합니다.

[[random_wallet]]
==== 비 결정적 (무작위) 지갑

((("wallets", "types of", "nondeterministic (random) wallets")))첫 번째 비트 동전 지갑 (현재는 비트 코아 코어라고 함)에서 지갑은 임의로 생성 된 개인 키의 모음입니다 (( "("지갑 ","유형 ","비 결정적 (임의의) 지갑 ")))) 예를 들어 원래 Bitcoin Core 클라이언트는 처음 시작할 때 100 개의 임의의 개인 키를 사전 생성하고 필요에 따라 더 많은 키를 생성하며 각 키는 한 번만 사용합니다. 이러한 지갑은 관리, 백업 및 가져 오기가 번거롭기 때문에 결정 론적 지갑으로 교체되고 있습니다. 무작위 키의 단점은 많은 키를 생성 할 경우 모든 키의 복사본을 보관해야하므로 지갑을 자주 백업해야한다는 것입니다. 지갑을 액세스 할 수 없게되면 각 키를 백업하거나 관리하는 자금을 취소 할 수 없게됩니다. 이는 하나의 트랜잭션에만 각 비트 코인 주소를 사용하여 주소 재사용을 피하는 원칙과 직접적으로 충돌합니다. 주소 재사용은 여러 트랜잭션과 주소를 서로 연관시킴으로써 프라이버시를 감소시킵니다. Type-0 비 결정적 지갑은 지갑의 빈약 한 선택입니다. 특히 주소 재사용을 피하려면 많은 키를 관리해야하므로 빈번한 백업이 필요합니다. Bitcoin Core 클라이언트에 Type-0 Wallet이 포함되어 있지만 Bitcoin Core 개발자는이 지갑을 사용하지 않는 것이 좋습니다. << Type0_wallet >>은 임의 키 조합이 느슨한 비 결정적 지갑을 보여줍니다.

[팁]
====
비 결정적 지갑의 사용은 간단한 테스트 이외의 다른 것에는 권장되지 않습니다. 그것들은 단순히 백업하고 사용하기에는 너무 성가신 것입니다. 대신 백업을 위해 _mnemonic_ seed와 함께 산업 표준 & # x2013; 기반 _HD wallet_을 사용하십시오.
====

[[Type0_wallet]]
[role="smallersixty"]
.Type-0 nondeterministic (random) wallet: a collection of randomly generated keys
image::images/mbc2_0501.png["Non-Deterministic Wallet"]

==== 결정적 (Seeded) 지갑

((("wallets", "types of", "deterministic (seeded) wallets")))결정적 또는 "파종 된"지갑은 공통 시드에서 파생 된 개인 키를 포함하는 지갑으로, (a ( "지갑", "유형", "결정적 (파종 된) 지갑")) 단방향 해시 함수. 시드는 인덱스 키 또는 "체인 코드"(<< hd_wallets >> 참조)와 같은 다른 데이터와 결합되어 임의로 생성 된 숫자이며 개인 키를 유도합니다. 결정 론적 지갑에서는 시드가 모든 파생 키를 복구하기에 충분하므로 작성시 단일 백업으로 충분합니다. 이 시드는 지갑 내보내기 또는 가져 오기에도 충분하므로 다른 Wallet 구현간에 모든 사용자 키를 쉽게 마이그레이션 할 수 있습니다. << Type1_wallet >>은 결정 론적 지갑의 논리적 다이어그램을 보여줍니다.

[[Type1_wallet]]
[role="smallersixty"]
.유형 -1 결정적 (시드 된) 지갑 : 시드에서 파생 된 결정적 키 시퀀스
image::images/mbc2_0502.png["Deterministic Wallet"]

[[hd_wallets]]
==== HD 월렛 (BIP-32 / BIP-44)

((("wallets", "types of", "hierarchical deterministic (HD) wallets")))((("hierarchical deterministic (HD) wallets")))((("bitcoin improvement proposals", "Hierarchical Deterministic Wallets (BIP-32/BIP-44)")))결정 성 지갑은 단일"시드 "에서 많은 키를 쉽게 파생시킬 수 있도록 개발되었습니다. 결정 론적 지갑의 가장 진보 된 형태는 BIP-32 표준에 의해 정의 된 HD 지갑입니다. HD 지갑에는 트리 구조에서 파생 된 키가 포함되어있어 부모 키가 일련의 자식 키를 파생시킬 수 있으며 각 키는 일련의 손자 키를 파생시킬 수 있으며 등등 무한 깊이로 파생됩니다. 이 트리 구조는 << Type2_wallet >>에 설명되어 있습니다.

[[Type2_wallet]]
.Type-2 HD wallet: a tree of keys generated from a single seed
image::images/mbc2_0503.png["HD wallet"]

HD 지갑은 무작위 (비 결정적) 키보다 두 가지 주요 이점을 제공합니다. 첫째, 트리 구조는 하위 조직의 특정 분기를 사용하여 입금을 받고 다른 지점을 사용하여 지급을 변경하는 등의 조직적인 의미를 표현하는 데 사용할 수 있습니다. 기업의 설정에서 키의 브랜치를 사용하여 부서, 자회사, 특정 기능 또는 회계 카테고리에 다른 분기를 할당 할 수도 있습니다.

HD 지갑의 두 번째 장점은 사용자가 해당 개인 키에 액세스하지 않고도 공개 키 시퀀스를 생성 할 수 있다는 것입니다. 따라서 HD 지갑을 안전하지 않은 서버 나 수신 전용 용량으로 사용할 수 있으며 각 트랜잭션마다 다른 공개 키를 발급 할 수 있습니다. 공개 키는 사전에 미리로드되거나 파생 될 필요가 없지만 서버에는 자금을 사용할 수있는 개인 키가 없습니다.

==== 씨앗과 니모닉 코드 (BIP-39)

((("wallets", "technology of", "seeds and mnemonic codes")))((("mnemonic code words")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)")))HD 지갑은 많은 키와 주소를 관리하는 매우 강력한 메커니즘입니다. 지갑을 가로 질러 쉽게 옮기고, 내보내고, 가져올 수있는 일련의 영어 단어로 씨앗을 만드는 표준화 된 방법과 결합하면 훨씬 유용합니다. 이것을 _mnemonic_이라고하며 표준은 BIP-39에 의해 정의됩니다. 오늘날 대부분의 비트 동전 지갑 (다른 cryptocurrencies의 지갑은 물론)은이 표준을 사용하며 상호 운용 가능한 니모닉을 사용하여 백업 및 복구를 위해 시드를 가져오고 내보낼 수 있습니다.

실용적인 관점에서 봅시다. 다음과 같은 종자 중 하나를 쓰는 것이 더 쉽고, 종이에 기록하고, 오류없이 읽으며, 수출하고, 다른 지갑으로 가져올 수 있습니까?

결정 론적 지갑을위한 종자, 16 진수
----
0C1E24E5917779D297E14D45F14E1A1A
----

.A seed for an deterministic wallet, from a 12-word mnemonic
----
army van defense carry jealous true 
garbage claim echo media make crunch
----

==== 월렛 모범 사례

비트 코인 지갑 기술이 성숙됨에 따라 일부 일반적인 산업 표준은 다음과 같은 특징을 가지고 있습니다. (( "지갑", "모범 사례"))) () (비트 코인 개선 제안서, "다용도 HD 지갑 구조 (BIP-43) 비트 코인 지갑이 폭넓게 상호 운영이 가능하고, 사용하기 쉽고, 안전하고, 융통성있게 만드는 점이 나타났습니다. 이러한 공통 표준은 다음과 같습니다.

* 니모닉 코드 단어, BIP-39 기준
* BIP-32 기반의 HD 지갑
* BIP-43 기반 다용도 HD 지갑 구조
* BIP-44에 기반한 다기능 및 다중 계정 지갑

이러한 표준은 향후 개발로 인해 변경되거나 쓸모 없게 될 수도 있지만 현재는 비트 코인의 사실상 지갑 표준이 된 일련의 인터 로킹 기술을 형성합니다.

이 표준은 광범위한 소프트웨어 및 하드웨어 비트 동전 지갑에 채택되어 이러한 모든 지갑을 상호 운용 할 수 있습니다. 사용자는 이러한 Wallet 중 하나에서 생성 된 니모닉을 내보내고 다른 Wallet으로 가져와 모든 트랜잭션, 키 및 주소를 복구 할 수 있습니다.

((("hardware wallets")))((("hardware wallets", see="also wallets")))이 표준을 지원하는 소프트웨어 지갑의 예로는 Breadwallet, Copay, Multibit HD 및 균사체가 있습니다. 이러한 표준을 지원하는 하드웨어 지갑의 예로는 키키, 레저 및 트레저 (알파벳순으로 나열)가 있습니다.

다음 섹션에서는 이러한 각 기술에 대해 자세히 설명합니다.

[팁]
====
비트 코인 지갑을 구현하는 경우 BIP-32, BIP-39, BIP-43 및 BIP-44 표준에 따라 백업을위한 니모닉 코드로 인코딩 된 시드를 사용하여 HD 지갑으로 구축해야합니다. 다음 절.
====

==== Bitcoin Wallet 사용하기

((("wallets", "using bitcoin wallets")))In <<user-stories>> << 사용자 스토리 >>에서는 Gabriel (( "유스 케이스", "웹 스토어", id = "gabrielfive"))), 진취적인 비트 코인 티셔츠, 커피 머그컵 및 스티커를 판매하는 간단한 웹 스토어를 운영하는 리우데 자네이루의 어린 십대.

((("wallets", "types of", "hardware wallets")))가브리엘은 트레 코 비트 코인 하드웨어 지갑 (<< a_trezor_device >>)을 사용하여 비트 코인을 안전하게 관리합니다. Trezor는 키를 저장하고 (HD 지갑의 형태로) 거래를 표시하는 두 개의 버튼이있는 간단한 USB 장치입니다. Trezor 지갑은이 장에서 논의 된 모든 업계 표준을 구현하므로 Gabriel은 독점 기술이나 단일 벤더 솔루션에 의존하지 않습니다.

[[a_trezor_device]]
.A Trezor device: a bitcoin HD wallet in hardware
image::images/mbc2_0504.png[alt]

Gabriel이 Trezor를 처음 사용했을 때 장치는 내장 된 하드웨어 난수 생성기에서 니모닉과 시드를 생성했습니다. 이 초기화 단계에서 지갑은 번호가 매겨진 일련의 단어를 하나씩 화면에 표시합니다 (<< trezor_mnemonic_display >> 참조).

[[trezor_mnemonic_display]]
.Trezor displaying one of the mnemonic words
image::images/mbc2_0505.png["Trezor wallet display of mnemonic word"]

이 니모닉을 적어서 Gabriel은 Trezor 장치가 손상되었거나 손상된 경우 복구에 사용할 수있는 백업을 만들었습니다 (<< mnemonic_paper_backup >> 참조). 이 니모닉은 새로운 Trezor 또는 많은 호환 가능한 소프트웨어 또는 하드웨어 지갑 중 하나에서 복구하는 데 사용할 수 있습니다. 단어 순서가 중요하므로 니모닉 용지 백업에는 각 단어에 대해 번호가 매겨진 공백이 있습니다. Gabriel은 올바른 순서를 유지하기 위해 번호가 매겨진 공간에 각 단어를 신중하게 기록해야했습니다.

[[mnemonic_paper_backup]]
.Gabriel's paper backup of the mnemonic
[cols="<1,^50,<1,^50", width="80%"]
|===
|*1.*| _army_ |*7.*| _garbage_
|*2.*| _van_ |*8.*| _claim_
|*3.*| _defense_ |*9.*| _echo_
|*4.*| _carry_ |*10.*| _media_
|*5.*| _jealous_ |*11.*| _make_
|*6.*| _true_ |*12.*| _crunch_
|===

[노트]
====
단순화를 위해 12 단어 니모닉이 << mnemonic_paper_backup >>에 표시됩니다. 실제로 대부분의 하드웨어 월렛은 24 단어의 더 안전한 니모닉을 생성합니다. 연상 기호는 길이에 관계없이 똑같은 방식으로 사용됩니다.
====

그의 웹 스토어를 처음으로 구현하기 위해 Gabriel은 Trezor 장치에서 생성 된 단일 비트 코인 주소를 사용합니다. 이 단일 주소는 모든 주문에 대해 모든 고객이 사용합니다. 앞으로 살펴 보 겠지만이 접근 방식에는 몇 가지 단점이 있으며 HD 지갑을 사용하여 향상시킬 수 있습니다 (( "(" ", startref ="gabrielfive "))))

=== 월렛 기술 세부 정보

이제 많은 비트 코인 지갑에서 사용되는 중요한 산업 표준을 자세히 살펴 보겠습니다.

[[mnemonic_code_words]]
==== 니모닉 코드 단어 (BIP-39)

((("wallets", "technology of", "mnemonic code words")))((("mnemonic code words", id="mnemonic05")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)", id="BIP3905")))니모닉 코드 워드는 결정 론적 지갑을 파생시키기 위해 시드로 사용되는 난수를 나타내는 (인코딩) 워드 시퀀스입니다. 단어의 순서는 시드를 재생성하기에 충분하며 거기에서 지갑과 모든 파생 된 키를 다시 만듭니다. 니모닉 단어가있는 결정 론적 지갑을 구현하는 지갑 응용 프로그램은 처음 지갑을 만들 때 사용자에게 12 ~ 24 단어 시퀀스를 표시합니다. 워드 시퀀스는 지갑 백업이며 동일하거나 호환되는 지갑 응용 프로그램의 모든 키를 복구하고 다시 생성하는 데 사용할 수 있습니다. 니모닉 단어를 사용하면 임의의 숫자 시퀀스와 비교하여 읽기 쉽고 정확하게 바꿔 쓸 수 있기 때문에 사용자가 지갑을 더 쉽게 백업 할 수 있습니다.

[팁]
====
((("brainwallets")))모닉 단어는 종종 "brainwallets"와 혼동됩니다. 그들은 동일하지 않습니다. 가장 큰 차이점은 두뇌 왈렛은 사용자가 선택한 단어로 구성되는 반면 니모닉 단어는 지갑에서 임의로 생성되어 사용자에게 표시된다는 것입니다. 이 중요한 차이는 니모닉 단어를 훨씬 더 안전하게 만든다. 왜냐하면 인간은 무작위성의 아주 나쁜 원인이기 때문이다.
====

니모닉 코드는 BIP-39에 정의되어 있습니다 (<< appdxbitcoinimpproposals >> 참조). BIP-39는 니모 닉 코드 표준을 구현 한 것입니다. (Electrum wallet, seealso = "wallets"))) Electrum 지갑과 predating BIP-39에서 사용되는 단어가 다른 다른 표준이 있습니다. BIP-39는 Trezor 하드웨어 지갑 뒤에있는 회사에서 제안했으며 Electrum의 구현과 호환되지 않습니다. 그러나 BIP-39는 수십 개의 상호 운용 가능한 구현에 대한 광범위한 업계 지원을 성취했으며 사실상 업계 표준으로 간주되어야합니다.
    
BIP-39는 니모닉 코드와 시드의 생성을 정의합니다. 여기서는 9 단계로 설명합니다. 명확성을 위해 프로세스는 두 부분으로 나뉩니다. 1 ~ 6 단계는 << generation_mnemonic_words >>에 표시되고 7 ~ 9 단계는 << mnemonic_to_seed >>에 표시됩니다.

[[generating_mnemonic_words]]
===== 니모닉 단어 생성하기

니모닉 단어는 BIP-39에 정의 된 표준화 된 프로세스를 사용하여 지갑에서 자동으로 생성됩니다. 지갑은 엔트로피 소스에서 시작하여 체크섬을 추가 한 다음 엔트로피를 단어 목록에 매핑합니다.

1. 128 ~ 256 비트의 랜덤 시퀀스 (엔트로피)를 만듭니다.
2. SHA256 해시의 첫 번째 (엔트로피 길이 / 32) 비트를 취하여 무작위 시퀀스의 체크섬을 만듭니다.
3. 임의 순서의 끝에 체크섬을 추가합니다.
4. 시퀀스를 11 비트 섹션으로 나눕니다.
5. 각 11 비트 값을 사전 정의 된 2048 단어 사전의 단어에 매핑하십시오.
6. 니모닉 코드는 일련의 단어입니다.

<< generation_entropy_and_encoding >>에서는 엔트로피를 사용하여 니모닉 단어를 생성하는 방법을 보여줍니다.

[[generating_entropy_and_encoding]]
[role="smallerseventy"]
.Generating entropy and encoding as mnemonic words
image::images/mbc2_0506.png["Generating entropy and encoding as mnemonic words"]

<<table_4-5>>는 엔트로피 데이터의 크기와 니모닉 코드의 길이를 단어로 나타낸 것입니다.

[[table_4-5]]
.Mnemonic codes: entropy and word length
[options="header"]
|=======
|Entropy (bits) | Checksum (bits) | Entropy *+* checksum (bits) | Mnemonic length (words)
| 128 | 4 | 132 | 12
| 160 | 5 | 165 | 15
| 192 | 6 | 198 | 18
| 224 | 7 | 231 | 21
| 256 | 8 | 264 | 24
|=======

[[mnemonic_to_seed]]
===== 니모닉에서 시드로

((("key-stretching function")))((("PBKDF2 function")))니모닉 단어는 길이가 128에서 256 비트 인 엔트로피를 나타냅니다. 그런 다음 엔트로피는 키 스트레칭 기능 PBKDF2를 사용하여 더 긴 (512 비트) 시드를 유도하는 데 사용됩니다. 생성 된 시드를 사용하여 결정 론적 지갑을 만들고 키를 파생시킵니다.

((("salts")))((("passphrases")))키 스트레칭 함수에는 니모닉과 _salt_의 두 가지 매개 변수가 사용됩니다. 키 스트레칭 기능에서 소금의 목적은 무차별 대입 공격을 가능하게하는 조회 테이블을 만들기 어렵게 만드는 것입니다. BIP-39 표준에서 소금은 <mnemonic_passphrase >>에 자세히 설명되어있는 것처럼 종자를 보호하는 추가적인 보안 요소 역할을하는 암호문을 도입 할 수있는 또 다른 목적을 가지고 있습니다.

7 - 9 단계에서 설명하는 프로세스는 이전에 << generation_mnemonic_words >>에서 설명한 프로세스에서 계속됩니다.

++++
<ol start="7">
	<li>The first parameter to the PBKDF2 key-stretching function is the <em>mnemonic</em> produced from step 6.</li>
	<li>The second parameter to the PBKDF2 key-stretching function is a <em>salt</em>. The salt is composed of the string constant "<code>mnemonic</code>" concatenated with an optional user-supplied passphrase string.</li>
	<li>PBKDF2 stretches the mnemonic and salt parameters using 2048 rounds of hashing with the HMAC-SHA512 algorithm, producing a 512-bit value as its final output. That 512-bit value is the seed.</li>
</ol>
++++

<<fig_5_7>>은 니모닉을 사용하여 시드를 생성하는 방법을 보여줍니다.

[[fig_5_7]]
.From mnemonic to seed
image::images/mbc2_0507.png["From mnemonic to seed"]

[팁]
====
키 스트레칭 기능은 2048 라운드의 해싱 기능을 사용하여 니모닉 또는 암호문에 대한 무차별 공격을 효과적으로 차단합니다. 가능한 파생 된 씨앗의 수는 엄청나지만 (2 ^ 512 ^) 수천 개의 패스 프레이즈와 니모닉 조합을 시도하는 것은 매우 비쌉니다.
====

테이블 전달 : [<a data-type="xref" href="#mnemonic_128_no_pass" data-xrefstyle="select: labelnumber"> #nnemonic_128_no_pass </a>], 패스 : [<a a data-type = "xref"href = "# mnemonic_128_w_pass"data-xrefstyle = "select : labelnumber"> # mnemonic_128_w_pass </a>]를 입력하고 다음을 전달합니다. [<a data-type = "xref"href = "# mnemonic_256_no_pass"data-xrefstyle = "select : labelnumber "> # mnemonic_256_no_pass </a>]에는 니모닉 코드 및 생성 된 씨드 (패스 프레이즈없이)의 예가 나와 있습니다.

[[mnemonic_128_no_pass]]
.128-bit entropy mnemonic code, no passphrase, resulting seed
[cols="h,"]
|=======
| *Entropy input (128 bits)*| +0c1e24e5917779d297e14d45f14e1a1a+
| *Mnemonic (12 words)* | +army van defense carry jealous true garbage claim echo media make crunch+
| *Passphrase*| (none)
| *Seed  (512 bits)* | +5b56c417303faa3fcba7e57400e120a0ca83ec5a4fc9ffba757fbe63fbd77a89a1a3be4c67196f57c39+
+a88b76373733891bfaba16ed27a813ceed498804c0570+
|=======

[[mnemonic_128_w_pass]]
.128-bit entropy mnemonic code, with passphrase, resulting seed
[cols="h,"]
|=======
| *Entropy input (128 bits)*| +0c1e24e5917779d297e14d45f14e1a1a+
| *Mnemonic (12 words)* | +army van defense carry jealous true garbage claim echo media make crunch+
| *Passphrase*| SuperDuperSecret
| *Seed  (512 bits)* | +3b5df16df2157104cfdd22830162a5e170c0161653e3afe6c88defeefb0818c793dbb28ab3ab091897d0+
+715861dc8a18358f80b79d49acf64142ae57037d1d54+
|=======


[[mnemonic_256_no_pass]]
.256-bit entropy mnemonic code, no passphrase, resulting seed
[cols="h,"]
|=======
| *Entropy input (256 bits)* | +2041546864449caff939d32d574753fe684d3c947c3346713dd8423e74abcf8c+
| *Mnemonic (24 words)* | +cake apple borrow silk endorse fitness top denial coil riot stay wolf 
luggage oxygen faint major edit measure invite love trap field dilemma oblige+
| *Passphrase*| (none)
| *Seed (512 bits)* | +3269bce2674acbd188d4f120072b13b088a0ecf87c6e4cae41657a0bb78f5315b33b3a04356e53d062e5+
+5f1e0deaa082df8d487381379df848a6ad7e98798404+
|=======

[[mnemonic_passphrase]]
===== BIP-39의 선택적 패스 프레이즈

((("passphrases")))BIP-39 표준을 사용하면 시드의 파생에 선택적 패스 프레이즈를 사용할 수 있습니다. 패스 프레이즈가 사용되지 않는 경우, 무릎 관절염은 상수 문자열 + "니모닉"+로 구성된 소금으로 늘어나며 지정된 니모닉에서 특정 512 비트 시드를 생성합니다. 패스 프레이즈가 사용되면 스트레칭 기능은 같은 니모닉에서 _different_ seed를 생성합니다. 사실, 단일 니모닉이 주어지면 가능한 모든 암호문이 다른 시드로 이어집니다. 본질적으로 "잘못된"암호 문구는 없습니다. 모든 암호 문구는 유효하며 모두 다른 종자로 이어져 광대 한 일련의 가능한 초기화되지 않은 지갑을 만듭니다. 가능한 지갑 세트는 너무 커서 (2 ^ 512 ^) 무력 사용이나 우연히 추측 할 수있는 가능성이 없습니다.

[팁]
====
BIP-39에는 "잘못된"암호 문구가 없습니다. 모든 암호 문구는 이전에 사용하지 않는 한 비어있는 지갑이됩니다.
====

선택적 암호 구문은 두 가지 중요한 기능을 생성합니다.

* 니모닉 자체를 쓸모 없게 만들고, 니모닉 백업을 도둑에 의해 손상으로부터 보호하는 두 번째 요소 (암기 된 것).

선택 가능한 암호 문구가 자금의 대부분을 담고있는 "실제"지갑에서 공격자를 산만하게하는 데 사용되는 적은 양의 자금으로 지갑으로 이어지는 그럴듯한 부인 인 "강압 지갑"의 한 형태.

그러나 암호 구문을 사용하면 손실 위험이 있습니다.

* 지갑 소유자가 무능력하거나 사망하고 암호문을 아는 사람이 아무도 없다면 씨앗은 쓸모 없으며 지갑에 저장된 모든 자금은 영원히 사라집니다.

* 반대로, 소유자가 시드와 동일한 위치에서 암호 구를 백업하면 두 번째 요소의 목적을 상실합니다.

패스 프레이즈는 매우 유용하지만 소유주로부터 살아남고 자신의 가족이 암호 해독 성 자산을 복구 할 수있는 가능성을 고려하여 신중하게 계획된 백업 및 복구 프로세스와 함께 사용해야합니다.

===== 니모닉 코드로 작업하기

BIP-39는 다양한 프로그래밍 언어로 된 라이브러리로 구현됩니다.

https://github.com/trezor/python-mnemonic[python-mnemonic] :: Python으로 BIP-39를 제안한 SatoshiLabs 팀이 표준을 구현했습니다.

https://github.com/bitcoinjs/bip39[bitcoinjs/bip39] :: JavaScript에서 인기있는 bitcoinJS 프레임 워크의 일부인 BIP-39 구현

https://github.com/libbitcoin/libbitcoin/blob/master/src/wallet/mnemonic.cpp[libbitcoin/mnemonic] :: 널리 사용되는 Libbitcoin 프레임 워크의 일부인 BIP-39 구현 : span class = "keep-together"> C ++ </ span>]

독립 실행 형 웹 페이지에 구현 된 BIP-39 생성기도 테스트 및 실험에 매우 유용합니다. << a_bip39_generator_as_a_standalone_web_page >>는 니모닉, 시드 및 확장 개인 키를 생성하는 독립형 웹 페이지를 보여줍니다.

[[a_bip39_generator_as_a_standalone_web_page]]
.BIP-39 생성기를 독립형 웹 페이지로 사용
image::images/mbc2_0508.png["BIP-39 generator web-page"]

((("", startref="mnemonic05")))((("", startref="BIP3905")))The page can be used offline in a browser, or https://dcpos.github.io/bip39/[accessed online].

==== 시드에서 HD 월렛 만들기

((("wallets", "technology of", "creating HD wallets from root seed")))((("root seeds")))((("hierarchical deterministic (HD) wallets"))) HD 지갑은 다음과 같이 구성되어 있습니다 (( "지갑", "기술", "루트 시드에서 HD 지갑 만들기" 128 비트, 256 비트 또는 512 비트 임의의 숫자 인 단일 _root seed_에서 생성됩니다. 가장 일반적으로이 시드는 이전 섹션에서 설명한대로 _ 메모리에서 생성됩니다.

HD 지갑의 모든 키는 결정적으로이 루트 시드에서 파생되므로 호환되는 모든 HD 지갑에서 해당 시드의 전체 HD 지갑을 다시 만들 수 있습니다. 따라서 루트 시드가 파생 된 니모닉 만 전송하면 수천 또는 수백만 개의 키가 들어있는 HD 지갑을 쉽게 백업, 복원, 내보내기 및 가져올 수 있습니다.

HD Wallet에 대한 마스터 키와 마스터 체인 코드를 만드는 과정은 << HDWalletFromSeed >>에 나와 있습니다.

[[HDWalletFromSeed]]
.Creating master keys and chain code from a root seed
image::images/mbc2_0509.png["HDWalletFromRootSeed"]

루트 시드는 HMAC-SHA512 알고리즘에 입력되고 결과 해시는 _master 개인 키 _ (m) 및 _master 체인 코드 _ (c)를 만드는 데 사용됩니다.

그런 다음 마스터 개인 키 (m)는 "pubkey"에서 본 정규 타원 곡선 곱셈 프로세스 + m * G +를 사용하여 해당 마스터 공개 키 (M)를 생성합니다.

체인 코드 (c)는 부모 키로부터 자식 키를 생성하는 함수에서 엔트로피를 도입하는 데 사용됩니다. 다음 절에서 보겠습니다.

===== 개인 자식 키 파생

((("child key derivation (CKD)")))((("public and private keys", "child key derivation (CKD)")))HD Wallet은 자식 키를 파생시키기 위해 _child key derivation_ (CKD) 함수를 사용합니다 (( "("자식 키 파생 (CKD) ")))) () (("public 및 private 키 ","child key derivation 부모 키로부터.

하위 키 유도 함수는 다음을 결합하는 단방향 해시 함수를 기반으로합니다.

* 부모 개인 또는 공개 키 (ECDSA 비 압축 키)
* 체인 코드 (seed) (256 비트)
* 색인 번호 (32 비트)

체인 코드는 결정 론적 무작위 데이터를 프로세스에 도입하는 데 사용되므로 인덱스와 하위 키를 알고 있으면 다른 하위 키를 파생시키는 데 충분하지 않습니다. 당신이 체인 코드를 가지고 있지 않다면, 자식 키를 아는 것은 형제를 찾지 못하게한다. 트리의 루트에있는 초기 체인 코드 시드는 시드에서 만들어지며 이후 자식 체인 코드는 각 부모 체인 코드에서 파생됩니다.

다음 세 항목 (상위 키, 체인 코드 및 인덱스)이 결합되어 해시되어 하위 키를 생성합니다.

부모 공개 키, 체인 코드 및 인덱스 번호가 결합되어 HMAC-SHA512 알고리즘으로 해시되어 512 비트 해시를 생성합니다. 이 512 비트 해시는 두 개의 256 비트 반으로 나뉩니다. 해시 출력의 오른쪽 절반의 256 비트는 하위의 체인 코드가됩니다. 해시의 왼쪽 절반 256 비트와 색인 번호는 상위 개인 키에 추가되어 하위 개인 키를 생성합니다. << CKDpriv >>에서 우리는 부모의 "제로"(색인에 의한 첫 번째) 자식을 생성하기 위해 인덱스가 0으로 설정된 것으로 설명합니다.

[[CKDpriv]]
.Extending a parent private key to create a child private key
image::images/mbc2_0510.png["ChildPrivateDerivation"]

색인을 변경하면 부모를 확장하고 시퀀스에서 다른 하위를 생성 할 수 있습니다 (예 : 하위 0, 하위 1, 하위 2 등). 각 상위 키는 2,147,483,647 (2 ^ 31 ^) 개의 자식을 가질 수 있습니다 (2 ^ 31 ^ is 나머지 절반은이 장의 뒷부분에서 설명 할 특별한 유형의 파생을 위해 예약되어 있기 때문에 전체 2 ^ 32 ^ 범위의 절반).

한 단계 아래의 과정을 반복하면, 각 어린이는 부모가되어 무한 세대에 걸쳐 자신의 자녀를 만들 수 있습니다.

===== 파생 된 자식 키 사용

자식 개인 키는 비 결정적 (임의의) 키와 구별 할 수 없습니다. 파생 함수는 단방향 함수이기 때문에 하위 키를 사용하여 상위 키를 찾을 수 없습니다. 하위 키는 형제를 찾기 위해 사용할 수도 없습니다. 자식이있는 경우, n> 1 자식 또는 n + 1 자식 또는 시퀀스의 일부인 다른 자식과 같은 형제를 찾을 수 없습니다. 부모 키와 체인 코드 만이 모든 자식을 파생시킬 수 있습니다. 자식 체인 코드가 없으면 자식 키를 사용하여 손자를 파생시킬 수 없습니다. 새 분기를 시작하고 손주를 파생하려면 자식 개인 키와 자식 체인 코드가 모두 필요합니다.

그렇다면 자식 개인 키는 자체적으로 어떤 용도로 사용할 수 있습니까? 공개 키와 비트 코인 주소를 만드는 데 사용할 수 있습니다. 그런 다음 거래를 서명하여 해당 주소로 지불 한 모든 것을 보낼 수 있습니다.

[팁]
====
자식 개인 키, 해당 공개 키 및 비트 코인 주소는 모두 임의로 생성 된 키 및 주소와 구별 할 수 없습니다. 그것들이 시퀀스의 일부라는 사실은 그것들을 생성 한 HD Wallet 기능 밖에서 볼 수 없습니다. 일단 만들어진 후에는 "정상적인"키와 똑같이 작동합니다.
====

===== 확장 된 키

((("public and private keys", "extended keys")))((("extended keys")))이전에 보았 듯이 키 유도 함수를 사용하여 트리 기반의 모든 수준에서 하위 항목을 만들 수 있습니다. 세 가지 입력 : 키, 체인 코드 및 원하는 자녀의 색인 두 가지 필수적인 요소는 키와 체인 코드이며, 이들을 결합하여 _extended key_라고합니다. "확장 된 키"라는 용어는 이러한 키가 어린이를 파생시키는 데 사용될 수 있으므로 "확장 가능한 키"로 간주 될 수 있습니다.

확장 키는 단순히 256 비트 키와 256 비트 체인 코드를 512 비트 시퀀스로 연결 한 것으로 저장되고 표현됩니다. 확장 키에는 두 가지 유형이 있습니다. 확장 된 개인 키는 개인 키와 체인 코드의 조합이며 하위 개인 키 (및 하위 공용 키)를 파생시키는 데 사용할 수 있습니다. 확장 된 공개 키는 공개 키 및 체인 코드이며, << public_key_derivation >>에서 설명한대로 하위 공용 키 (_public only_)를 만드는 데 사용할 수 있습니다.

확장 된 키를 HD 지갑의 트리 구조에있는 분기의 루트라고 생각하십시오. 브랜치의 루트를 사용하여 나머지 브랜치를 파생시킬 수 있습니다. 확장 개인 키는 완전한 분기를 만들 수 있지만 확장 공개 키는 _ 공개적으로 공개 키의 분기를 만들 수 있습니다.

[팁]
====
확장 된 키는 개인 또는 공개 키와 체인 코드로 구성됩니다. 확장 된 키는 하위 구조를 생성하여 트리 구조에서 자체 분기를 생성합니다. 확장 된 키를 공유하면 전체 지점에 액세스 할 수 있습니다.
====

확장 키는 Base58Check를 사용하여 인코딩되어 다른 BIP-32 및 호환 지우는 지갑간에 쉽게 내보내고 가져올 수 있습니다. 확장 키에 대한 Base58Check 코딩은 쉽게 식별 할 수 있도록 Base58 문자로 인코딩 할 때 접두사 "xprv"및 "xpub"가되는 특수 버전 번호를 사용합니다. 확장 된 키는 512 또는 513 비트이기 때문에 이전에 본 다른 Base58Check 인코딩 된 문자열보다 훨씬 길다.

Base58Check에 인코딩 된 확장 된 _private_ 키의 예는 다음과 같습니다.

----
xprv9tyUQV64JT5qs3RSTJkXCWKMyUgoQp7F3hA1xzG6ZGu6u6Q9VMNjGr67Lctvy5P8oyaYAL9CAWrUE9i6GoNMKUga5biW6Hx4tws2six3b9c
----

Base58Check에 인코딩 된 해당 확장 _public_ 키는 다음과 같습니다.

----
xpub67xpozcx8pe95XVuZLHXZeG6XWXHpGq6Qv5cmNfi7cS5mtjJ2tgypeQbBs2UAR6KECeeMVKZBPLrtJunSDMstweyLXhRgPxdp14sk9tJPW9
----

[[public__child_key_derivation]]
===== 공개 된 자식 키 유도

((("public and private keys", "public child key derivation")))전술 한 바와 같이, HD 지갑의 매우 유용한 특성은 공개 키를 가지고 있지 않은 공개 키에서 공개 키를 도출 할 수 있다는 점입니다. 이렇게하면 자식 공개 키를 파생시키는 두 가지 방법, 즉 자식 개인 키 또는 부모 공용 키에서 직접 가져올 수 있습니다.

따라서 확장 된 공개 키를 사용하여 HD 지갑 구조의 해당 분기에있는 모든 공개 키 (및 공용 키만)를 파생시킬 수 있습니다.

이 바로 가기는 서버 또는 응용 프로그램에 확장 공개 키의 복사본이 있고 개인 키가없는 매우 안전한 공용 키 배포를 만드는 데 사용할 수 있습니다. 이러한 종류의 배포는 무한 수의 공개 키 및 비트 코인 주소를 생성 할 수 있지만 해당 주소로 전송 된 돈을 보낼 수는 없습니다. 한편,보다 안전한 다른 서버에서 확장 개인 키는 트랜잭션에 서명하고 돈을 지출하기 위해 모든 해당 개인 키를 파생시킬 수 있습니다.

이 솔루션의 한 가지 일반적인 응용 프로그램은 전자 상거래 응용 프로그램을 제공하는 웹 서버에 확장 공개 키를 설치하는 것입니다. 웹 서버는 공개 키 유도 기능을 사용하여 모든 거래 (예를 들어, 고객 장바구니)를위한 새로운 비트 코인 (bitcoin) 주소를 생성 할 수있다. 웹 서버에는 도용에 취약한 개인 키가 없습니다. HD 지갑이 없으면 별도의 보안 서버에 수천 개의 비트 코인 주소를 생성 한 다음 전자 상거래 서버에 미리로드하는 것이 유일한 방법입니다. 이러한 접근 방식은 번거롭고 전자 상거래 서버가 키를 "소모"하지 않도록하기 위해 지속적인 유지 관리가 필요합니다.

((("cold storage")))((("storage", "cold storage")))((("hardware wallets")))이 솔루션의 또 다른 일반적인 응용 프로그램은 콜드 스토리지 또는 하드웨어 지갑입니다. 이 시나리오에서는 개인 키를 종이 지갑이나 하드웨어 장치 (예 : Trezor 하드웨어 지갑)에 저장할 수 있으며 확장 공개 키는 온라인 상태로 유지할 수 있습니다. 개인 키는 오프라인 상태로 안전하게 저장되지만 사용자는 마음대로 "수신"주소를 만들 수 있습니다. 자금을 사용하기 위해 사용자는 오프라인 서명 비트 코인 클라이언트에서 확장 개인 키를 사용하거나 하드웨어 지갑 장치 (예 : Trezor)에서 거래를 서명 할 수 있습니다. << CKDpub >>는 자식 공개 키를 파생시키기 위해 부모 공개 키를 확장하는 메커니즘을 보여줍니다.

[[CKDpub]]
.Extending a parent public key to create a child public key
image::images/mbc2_0511.png["ChildPublicDerivation"]

==== 웹 스토어에서 확장 공개 키 사용

((("wallets", "technology of", "using extended public keys on web stores")))Gabriel의 웹 스토어에서 스토리를 계속 사용하여 HD 지갑을 사용하는 방법을 살펴 보겠습니다.((("use cases", "web store", id="gabrielfivetwo"))) 

Gabriel은 처음으로 호스팅 된 Wordpress 페이지를 기반으로 웹 스토어를 취미로 설정했습니다. 그의 상점은 단 몇 개의 페이지와 하나의 비트 코인 주소가있는 주문 양식으로 아주 기본적이었습니다.

Gabriel은 자신의 Trezor 장치에서 생성 한 첫 번째 비트 코인 주소를 저장소의 주요 비트 코인 주소로 사용했습니다. 이렇게하면 모든 입금은 Trezor 하드웨어 지갑이 관리하는 주소로 지불됩니다.

고객은 양식을 사용하여 주문을 제출하고 Gabriel의 게시 된 비트 코인 주소로 지불금을 보내 Gabriel의 주문 세부 정보가 포함 된 이메일을 처리합니다. 매주 몇 차례의 주문으로이 시스템은 충분히 잘 작동했습니다.

그러나 작은 웹 스토어는 꽤 성공적이었고 지역 사회에서 많은 주문을 받았습니다. 곧, 가브리엘은 압도 당했다. 모든 주문이 동일한 주소를 지불하면 주문과 거래를 정확하게 일치시키기가 어려워졌습니다. 특히 동일한 금액의 여러 주문이 서로 가까이에 왔을 때 더욱 그렇습니다.

Gabriel의 HD 지갑은 개인 키를 모른 채 공개 키를 파생시킬 수있는 기능을 통해 더 나은 솔루션을 제공합니다. Gabriel은 자신의 웹 사이트에 확장 공개 키 (xpub)를로드 할 수 있습니다.이 공개 키를 사용하여 모든 고객 주문에 대한 고유 주소를 파생시킬 수 있습니다. 가브리엘은 Trezor에서 자금을 사용할 수 있지만 웹 사이트에로드 된 xpub는 주소를 생성하고 자금을받을 수만 있습니다. HD 지갑의이 기능은 훌륭한 보안 기능입니다. Gabriel의 웹 사이트에는 개인 키가 없으므로 높은 수준의 보안이 필요하지 않습니다.

xpub를 내보내려면 Gabriel은 Trezor 하드웨어 지갑과 함께 웹 기반 소프트웨어를 사용합니다. Trezor 장치를 연결해야 공개 키를 내보낼 수 있습니다. 하드웨어 지갑은 개인 키를 내보낼 수 없으며 항상 개인 키를 기기에 보관합니다. << export_xpub >>는 가브리엘이 xpub를 내보내는 데 사용하는 웹 인터페이스를 보여줍니다.

[[export_xpub]]
.Trezor 하드웨어 지갑에서 xpub 내보내기
image::images/mbc2_0512.png["Exporting the xpub from the Trezor"]

Gabriel은 xpub를 그의 웹 스토어의 비트 코 상점 소프트웨어에 복사합니다. 그는 다양한 웹 호스팅 및 콘텐츠 플랫폼을위한 오픈 소스 웹 스토어 플러그인 인 _Mycelium Gear_를 사용합니다. 균사체 기어는 xpub를 사용하여 모든 구매에 대해 고유 한 주소를 생성합니다. ((("", startref="gabrielfivetwo")))

===== 강화 된 자식 키 파생

((("public and private keys", "hardened child key derivation")))((("hardened derivation")))xpub에서 공개 키를 파생시킬 수있는 능력은 매우 유용하지만, 잠재적 인 위험. xpub에 대한 액세스는 하위 개인 키에 대한 액세스를 제공하지 않습니다. 그러나 xpub에 체인 코드가 포함되어 있으므로 자식 개인 키가 알려져 있거나 누출 된 경우 체인 코드와 함께 사용하여 다른 모든 개인 키를 파생시킬 수 있습니다. 누출 된 하나의 자식 개인 키와 부모 체인 코드는 모든 자식의 모든 개인 키를 표시합니다. 더욱이 부모 자식 키와 부모 체인 코드를 함께 사용하여 부모 개인 키를 추론 할 수 있습니다.

이러한 위험에 대응하기 위해 HD 지갑은 부모 공개 키와 하위 체인 코드 간의 관계를 "파손"시키는 _ 파생 된 파생 _이라는 대체 파생 함수를 사용합니다. 강화 된 파생 함수는 상위 공개 키 대신 상위 개인 키를 사용하여 하위 체인 코드를 파생시킵니다. 이렇게하면 부모 / 자식 시퀀스에 "방화벽"이 만들어지며 부모 또는 형제 개인 키를 손상시키는 데 사용할 수없는 체인 코드가 생성됩니다. 강화 된 파생 함수는 << CKDprime >>의 다이어그램에 표시된 것처럼 부모 개인 키가 부모 공용 키 대신 해시 함수에 대한 입력으로 사용된다는 점을 제외하고는 일반 자식 개인 키 파생과 거의 동일하게 보입니다.

[[CKDprime]]
.자식 키의 강화 된 파생; 부모 공개 키를 생략한다.
image::images/mbc2_0513.png["ChildHardPrivateDerivation"]

강화 된 개인 유도 기능이 사용될 때, 결과로서 생기는 자식 개인 키 및 체인 코드는 정상적인 유도 기능에 의한 결과와 완전히 다르다. 키의 결과 "분기"는 취약하지 않은 확장 된 공개 키를 생성하는 데 사용될 수 있습니다. 이는 포함 된 체인 코드를 사용하여 개인 키를 공개 할 수 없기 때문입니다. 따라서 강화 된 파생은 확장 공개 키가 사용되는 레벨 위의 트리에서 "갭"을 만드는 데 사용됩니다.

간단히 말해서 xpub의 편의를 사용하여 유출 된 체인 코드의 위험에 노출되지 않고 공개 키의 분기를 파생 시키려면 일반 부모가 아닌 강화 된 부모에서 파생해야합니다. 마스터 키의 수준 1 하위 항목은 항상 마스터 키의 손상을 방지하기 위해 강화 된 파생을 통해 파생되는 것이 가장 좋습니다.

===== 정상 및 강화 유도에 대한 색인 번호

파생 함수에 사용 된 인덱스 번호는 32 비트 정수입니다. 일반 유도 함수를 통해 파생 된 키 대 강화 유도를 통해 파생 된 키를 쉽게 구별하기 위해이 인덱스 번호는 두 범위로 나뉩니다. 0과 2 사이의 인덱스 번호는 31 ^ & # x13; 1 (0x0 ~ 0x7FFFFFFF)은 일반 파생에만 _ 사용됩니다. 2 ^ 31 ^와 2 ^ 32 ^ & # x1; 1 (0x80000000 ~ 0xFFFFFFFF) 사이의 인덱스 번호는 강화 된 파생에만 _ 사용됩니다. 따라서 색인 번호가 2 ^ 31 ^보다 작 으면 하위는 정상이며 색인 번호가 2 ^ 31 ^ 이상인 경우 하위는 강화됩니다.

색인 번호를 읽기 쉽도록 표시하려면 강화 된 하위 색인 번호가 0부터 시작하여 소수이지만 기호로 표시됩니다. 따라서 첫 번째 일반 자식 키는 0으로 표시되고 첫 번째 강화 된 자식 (인덱스 0x80000000)은 0 ++ 및 # x2; ++로 표시됩니다. 그런 다음 순서대로 두 번째 강화 키는 인덱스 0x80000001을 가지며 1 + & # x27; ++ 등으로 표시됩니다. HD 지갑 색인 i ++ & # x2; ++를 보면 2 ^ 31 ^ + i를 의미합니다.

===== HD 월렛 키 식별자 (경로)

HD 지갑의 키는 "경로"명명 규칙을 사용하여 식별되며 트리의 각 레벨은 슬래시 (/) 문자로 구분됩니다 (<< table_4-8 참조) ( "(계층 적 결정 성 (HD) 지갑) >>). 마스터 개인 키에서 파생 된 개인 키는 "m"으로 시작합니다. 마스터 공개 키에서 파생 된 공개 키는 "M"으로 시작합니다. 따라서 마스터 개인 키의 첫 번째 자식 개인 키는 m / 0입니다. 첫 번째 자식 공개 키는 M / 0입니다. 첫 번째 자식의 두 번째 손자는 m / 0 / 1이고, 나머지도 마찬가지입니다.
 
키의 "조상"은 파생 된 마스터 키에 도달 할 때까지 오른쪽에서 왼쪽으로 읽습니다. 예를 들어, 식별자 m / x / y / z는 키 m / x / y의 x 번째 자식 인 키 m / x의 y 번째 자식 인 키 m / x / y의 z 번째 자식 인 키를 설명합니다. 엠.

[[table_4-8]]
.HD wallet path examples
[options="header"]
|=======
|HD path | Key described
| m/0 | The first (0) child private key from the master private key (m)
| m/0/0 | The first grandchild private key of the first child (m/0) 
| m/0'/0 | The first normal grandchild of the first _hardened_ child (m/0')
| m/1/0 | The first grandchild private key of the second child (m/1)
| M/23/17/0/0 | The first great-great-grandchild public key of the first great-grandchild of the 18th grandchild of the 24th child
|=======

===== HD 지갑 트리 구조 탐색

HD 지갑 트리 구조는 엄청난 유연성을 제공합니다. 각 부모 확장 키에는 40 억 명의 어린이가있을 수 있습니다. 20 억 명의 정상적인 아동과 20 억 명의 강화 된 아동. 그 아이들은 각각 40 억 명의 아이들을 가질 수 있습니다. 그 나무는 무한한 세대의 세대와 함께 당신이 원하는만큼 깊을 수 있습니다. 그러나 이러한 모든 유연성으로이 무한한 트리를 탐색하기가 매우 어려워집니다. 지사와 하부 조직으로 내부 조직을 구성 할 수있는 가능성이 무한하기 때문에 구현간에 HD Wallet을 전송하는 것은 특히 어렵습니다.

두 가지 BIP는 HD 지갑 구조의 몇 가지 제안 표준을 만들어이 복잡성에 대한 솔루션을 제공합니다. BIP-43은 트리 구조의 "목적"을 나타내는 특수 식별자로 첫 번째 강화 된 하위 인덱스를 사용하도록 제안합니다. BIP-43을 기반으로하는 HD 지갑은 트리의 한 수준 -1 분기 만 사용하고 그 목적을 정의하여 나머지 트리의 구조와 네임 스페이스를 식별하는 인덱스 번호를 사용해야합니다. 예를 들어, 분기 m / i ++ & # x27; ++ /만을 사용하는 HD 지갑은 특정 목적을 나타 내기위한 것이며 색인 번호 "i"로 식별됩니다.

BIP-44는이 규격을 확장하여 다중 목적 구조를 BIP-43의 "용도"번호 + 44 '+로 제안합니다. BIP-44 구조를 따르는 모든 HD 지갑은 트리의 하나의 브랜치 (m / 44 '/) 만 사용한다는 사실에 의해 식별됩니다.

BIP-44는 미리 정의 된 다섯 가지 트리 수준으로 구성된 구조를 지정합니다.

-----
m / purpose' / coin_type' / account' / change / address_index
-----

첫 번째 수준의 "목적"은 항상 + 44 '+로 설정됩니다. 두 번째 수준의 "coin_type"은 cryptocurrency 동전의 유형을 지정하며 각 통화에 두 번째 수준 아래에 자체 하위 트리가있는 다중 통화 HD 지갑을 허용합니다. Bitcoin은 m / 44 '/ 0', Bitcoin Testnet은 m / 44 ++ & # x27; ++ / 1 ++ & # x27; ++, Litecoin은 m / 44 + + & # x27; ++ / 2 ++ & # x27; ++.

트리의 세 번째 수준은 "계정"입니다.이 기능을 통해 사용자는 회계 또는 조직 목적을 위해 지갑을 별도의 논리적 하위 계좌로 세분화 할 수 있습니다. 예를 들어, HD 지갑은 두 비트의 "계정"을 포함 할 수 있습니다 : m / 44 ++ & # x27; ++ / 0 ++ & # x27; ++ / 0 ++ & # x27; ++ 및 m / 44 + + & # x27; ++ / 0 ++ & # x27; ++ / 1 ++ & # x27; ++. 각 계정은 자체 하위 트리의 루트입니다.

(4) "변경"에서 HD 지갑은 수신 주소를 생성하기위한 것이고 변경 주소를 생성하기위한 것인 두 개의 하위 트리를 가지고 있습니다. (( "(키 및 주소", "public and private keys"도 참조하십시오)) 이전 레벨은 강화 된 파생을 사용했지만이 레벨은 정상 파생을 사용합니다. 이것은 트리의이 레벨이 비보안 환경에서 사용하기 위해 확장 공개 키를 내보낼 수있게합니다. 사용 가능한 주소는 HD 지갑에서 네 번째 수준의 하위 항목으로 파생되어 트리의 다섯 번째 수준을 "address_index"로 만듭니다. 예를 들어, 기본 계정에서 비트 코인 지불을위한 세 번째 수신 주소는 M / 44 ++ & # +++ ++ / 0 ++ & # +++ ++ / 0 ++ & # x27; ++ / 0 / 2. << table_4-9 >>는 몇 가지 예를 보여줍니다.

[[table_4-9]]
.BIP-44 HD wallet structure examples
[options="header"]
|=======
|HD path | Key described
| M/44++&#x27;++/0++&#x27;++/0++&#x27;++/0/2 | The third receiving public key for the primary bitcoin account
| M/44++&#x27;++/0++&#x27;++/3++&#x27;++/1/14 | The fifteenth change-address public key for the fourth bitcoin account
| m/44++&#x27;++/2++&#x27;++/0++&#x27;++/0/1 | The second private key in the Litecoin main account, for signing transactions
|=======
